<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="42932"><g><title>alloc::vec::from_elem (31 samples, 0.07%)</title><rect x="0.8642%" y="469" width="0.0722%" height="15" fill="rgb(227,0,7)" fg:x="371" fg:w="31"/><text x="1.1142%" y="479.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (31 samples, 0.07%)</title><rect x="0.8642%" y="453" width="0.0722%" height="15" fill="rgb(217,0,24)" fg:x="371" fg:w="31"/><text x="1.1142%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 0.07%)</title><rect x="0.8642%" y="437" width="0.0722%" height="15" fill="rgb(221,193,54)" fg:x="371" fg:w="31"/><text x="1.1142%" y="447.50"></text></g><g><title>core::ptr::write (31 samples, 0.07%)</title><rect x="0.8642%" y="421" width="0.0722%" height="15" fill="rgb(248,212,6)" fg:x="371" fg:w="31"/><text x="1.1142%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.01%)</title><rect x="1.0458%" y="261" width="0.0140%" height="15" fill="rgb(208,68,35)" fg:x="449" fg:w="6"/><text x="1.2958%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.01%)</title><rect x="1.0458%" y="245" width="0.0140%" height="15" fill="rgb(232,128,0)" fg:x="449" fg:w="6"/><text x="1.2958%" y="255.50"></text></g><g><title>__memcpy_generic (16 samples, 0.04%)</title><rect x="1.0598%" y="245" width="0.0373%" height="15" fill="rgb(207,160,47)" fg:x="455" fg:w="16"/><text x="1.3098%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (35 samples, 0.08%)</title><rect x="1.0179%" y="341" width="0.0815%" height="15" fill="rgb(228,23,34)" fg:x="437" fg:w="35"/><text x="1.2679%" y="351.50"></text></g><g><title>alloc::string::String::push_str (25 samples, 0.06%)</title><rect x="1.0412%" y="325" width="0.0582%" height="15" fill="rgb(218,30,26)" fg:x="447" fg:w="25"/><text x="1.2912%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (25 samples, 0.06%)</title><rect x="1.0412%" y="309" width="0.0582%" height="15" fill="rgb(220,122,19)" fg:x="447" fg:w="25"/><text x="1.2912%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.06%)</title><rect x="1.0412%" y="293" width="0.0582%" height="15" fill="rgb(250,228,42)" fg:x="447" fg:w="25"/><text x="1.2912%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.06%)</title><rect x="1.0412%" y="277" width="0.0582%" height="15" fill="rgb(240,193,28)" fg:x="447" fg:w="25"/><text x="1.2912%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.04%)</title><rect x="1.0598%" y="261" width="0.0396%" height="15" fill="rgb(216,20,37)" fg:x="455" fg:w="17"/><text x="1.3098%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.02%)</title><rect x="1.1041%" y="341" width="0.0163%" height="15" fill="rgb(206,188,39)" fg:x="474" fg:w="7"/><text x="1.3541%" y="351.50"></text></g><g><title>_int_realloc (11 samples, 0.03%)</title><rect x="1.2415%" y="37" width="0.0256%" height="15" fill="rgb(217,207,13)" fg:x="533" fg:w="11"/><text x="1.4915%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (32 samples, 0.07%)</title><rect x="1.2066%" y="133" width="0.0745%" height="15" fill="rgb(231,73,38)" fg:x="518" fg:w="32"/><text x="1.4566%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (32 samples, 0.07%)</title><rect x="1.2066%" y="117" width="0.0745%" height="15" fill="rgb(225,20,46)" fg:x="518" fg:w="32"/><text x="1.4566%" y="127.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.07%)</title><rect x="1.2066%" y="101" width="0.0745%" height="15" fill="rgb(210,31,41)" fg:x="518" fg:w="32"/><text x="1.4566%" y="111.50"></text></g><g><title>__rdl_realloc (32 samples, 0.07%)</title><rect x="1.2066%" y="85" width="0.0745%" height="15" fill="rgb(221,200,47)" fg:x="518" fg:w="32"/><text x="1.4566%" y="95.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (32 samples, 0.07%)</title><rect x="1.2066%" y="69" width="0.0745%" height="15" fill="rgb(226,26,5)" fg:x="518" fg:w="32"/><text x="1.4566%" y="79.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.07%)</title><rect x="1.2066%" y="53" width="0.0745%" height="15" fill="rgb(249,33,26)" fg:x="518" fg:w="32"/><text x="1.4566%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (47 samples, 0.11%)</title><rect x="1.1739%" y="213" width="0.1095%" height="15" fill="rgb(235,183,28)" fg:x="504" fg:w="47"/><text x="1.4239%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 0.11%)</title><rect x="1.1763%" y="197" width="0.1071%" height="15" fill="rgb(221,5,38)" fg:x="505" fg:w="46"/><text x="1.4263%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.11%)</title><rect x="1.1763%" y="181" width="0.1071%" height="15" fill="rgb(247,18,42)" fg:x="505" fg:w="46"/><text x="1.4263%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (44 samples, 0.10%)</title><rect x="1.1809%" y="165" width="0.1025%" height="15" fill="rgb(241,131,45)" fg:x="507" fg:w="44"/><text x="1.4309%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.08%)</title><rect x="1.1996%" y="149" width="0.0839%" height="15" fill="rgb(249,31,29)" fg:x="515" fg:w="36"/><text x="1.4496%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (57 samples, 0.13%)</title><rect x="1.1623%" y="293" width="0.1328%" height="15" fill="rgb(225,111,53)" fg:x="499" fg:w="57"/><text x="1.4123%" y="303.50"></text></g><g><title>alloc::string::String::push_str (56 samples, 0.13%)</title><rect x="1.1646%" y="277" width="0.1304%" height="15" fill="rgb(238,160,17)" fg:x="500" fg:w="56"/><text x="1.4146%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (56 samples, 0.13%)</title><rect x="1.1646%" y="261" width="0.1304%" height="15" fill="rgb(214,148,48)" fg:x="500" fg:w="56"/><text x="1.4146%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 0.13%)</title><rect x="1.1646%" y="245" width="0.1304%" height="15" fill="rgb(232,36,49)" fg:x="500" fg:w="56"/><text x="1.4146%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (56 samples, 0.13%)</title><rect x="1.1646%" y="229" width="0.1304%" height="15" fill="rgb(209,103,24)" fg:x="500" fg:w="56"/><text x="1.4146%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="1.2834%" y="213" width="0.0116%" height="15" fill="rgb(229,88,8)" fg:x="551" fg:w="5"/><text x="1.5334%" y="223.50"></text></g><g><title>__memcpy_generic (5 samples, 0.01%)</title><rect x="1.2834%" y="197" width="0.0116%" height="15" fill="rgb(213,181,19)" fg:x="551" fg:w="5"/><text x="1.5334%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad_integral (14 samples, 0.03%)</title><rect x="1.2951%" y="293" width="0.0326%" height="15" fill="rgb(254,191,54)" fg:x="556" fg:w="14"/><text x="1.5451%" y="303.50"></text></g><g><title>core::fmt::num::parse_u64_into (17 samples, 0.04%)</title><rect x="1.3277%" y="293" width="0.0396%" height="15" fill="rgb(241,83,37)" fg:x="570" fg:w="17"/><text x="1.5777%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.01%)</title><rect x="1.3533%" y="277" width="0.0140%" height="15" fill="rgb(233,36,39)" fg:x="581" fg:w="6"/><text x="1.6033%" y="287.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::Display for u128&gt;::fmt (102 samples, 0.24%)</title><rect x="1.1320%" y="325" width="0.2376%" height="15" fill="rgb(226,3,54)" fg:x="486" fg:w="102"/><text x="1.3820%" y="335.50"></text></g><g><title>core::fmt::num::fmt_u128 (94 samples, 0.22%)</title><rect x="1.1507%" y="309" width="0.2190%" height="15" fill="rgb(245,192,40)" fg:x="494" fg:w="94"/><text x="1.4007%" y="319.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.03%)</title><rect x="1.4372%" y="133" width="0.0303%" height="15" fill="rgb(238,167,29)" fg:x="617" fg:w="13"/><text x="1.6872%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (30 samples, 0.07%)</title><rect x="1.4045%" y="213" width="0.0699%" height="15" fill="rgb(232,182,51)" fg:x="603" fg:w="30"/><text x="1.6545%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (29 samples, 0.07%)</title><rect x="1.4069%" y="197" width="0.0675%" height="15" fill="rgb(231,60,39)" fg:x="604" fg:w="29"/><text x="1.6569%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (29 samples, 0.07%)</title><rect x="1.4069%" y="181" width="0.0675%" height="15" fill="rgb(208,69,12)" fg:x="604" fg:w="29"/><text x="1.6569%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.06%)</title><rect x="1.4115%" y="165" width="0.0629%" height="15" fill="rgb(235,93,37)" fg:x="606" fg:w="27"/><text x="1.6615%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.06%)</title><rect x="1.4185%" y="149" width="0.0559%" height="15" fill="rgb(213,116,39)" fg:x="609" fg:w="24"/><text x="1.6685%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (39 samples, 0.09%)</title><rect x="1.3952%" y="293" width="0.0908%" height="15" fill="rgb(222,207,29)" fg:x="599" fg:w="39"/><text x="1.6452%" y="303.50"></text></g><g><title>alloc::string::String::push_str (37 samples, 0.09%)</title><rect x="1.3999%" y="277" width="0.0862%" height="15" fill="rgb(206,96,30)" fg:x="601" fg:w="37"/><text x="1.6499%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (37 samples, 0.09%)</title><rect x="1.3999%" y="261" width="0.0862%" height="15" fill="rgb(218,138,4)" fg:x="601" fg:w="37"/><text x="1.6499%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (37 samples, 0.09%)</title><rect x="1.3999%" y="245" width="0.0862%" height="15" fill="rgb(250,191,14)" fg:x="601" fg:w="37"/><text x="1.6499%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (37 samples, 0.09%)</title><rect x="1.3999%" y="229" width="0.0862%" height="15" fill="rgb(239,60,40)" fg:x="601" fg:w="37"/><text x="1.6499%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="1.4744%" y="213" width="0.0116%" height="15" fill="rgb(206,27,48)" fg:x="633" fg:w="5"/><text x="1.7244%" y="223.50"></text></g><g><title>core::fmt::Formatter::pad_integral (13 samples, 0.03%)</title><rect x="1.4861%" y="293" width="0.0303%" height="15" fill="rgb(225,35,8)" fg:x="638" fg:w="13"/><text x="1.7361%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (7 samples, 0.02%)</title><rect x="1.5000%" y="277" width="0.0163%" height="15" fill="rgb(250,213,24)" fg:x="644" fg:w="7"/><text x="1.7500%" y="287.50"></text></g><g><title>alloc::fmt::format (256 samples, 0.60%)</title><rect x="0.9527%" y="453" width="0.5963%" height="15" fill="rgb(247,123,22)" fg:x="409" fg:w="256"/><text x="1.2027%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (256 samples, 0.60%)</title><rect x="0.9527%" y="437" width="0.5963%" height="15" fill="rgb(231,138,38)" fg:x="409" fg:w="256"/><text x="1.2027%" y="447.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (256 samples, 0.60%)</title><rect x="0.9527%" y="421" width="0.5963%" height="15" fill="rgb(231,145,46)" fg:x="409" fg:w="256"/><text x="1.2027%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (256 samples, 0.60%)</title><rect x="0.9527%" y="405" width="0.5963%" height="15" fill="rgb(251,118,11)" fg:x="409" fg:w="256"/><text x="1.2027%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (245 samples, 0.57%)</title><rect x="0.9783%" y="389" width="0.5707%" height="15" fill="rgb(217,147,25)" fg:x="420" fg:w="245"/><text x="1.2283%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (245 samples, 0.57%)</title><rect x="0.9783%" y="373" width="0.5707%" height="15" fill="rgb(247,81,37)" fg:x="420" fg:w="245"/><text x="1.2283%" y="383.50"></text></g><g><title>core::fmt::write (245 samples, 0.57%)</title><rect x="0.9783%" y="357" width="0.5707%" height="15" fill="rgb(209,12,38)" fg:x="420" fg:w="245"/><text x="1.2283%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (180 samples, 0.42%)</title><rect x="1.1297%" y="341" width="0.4193%" height="15" fill="rgb(227,1,9)" fg:x="485" fg:w="180"/><text x="1.3797%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (77 samples, 0.18%)</title><rect x="1.3696%" y="325" width="0.1794%" height="15" fill="rgb(248,47,43)" fg:x="588" fg:w="77"/><text x="1.6196%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (75 samples, 0.17%)</title><rect x="1.3743%" y="309" width="0.1747%" height="15" fill="rgb(221,10,30)" fg:x="590" fg:w="75"/><text x="1.6243%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.03%)</title><rect x="1.5164%" y="293" width="0.0326%" height="15" fill="rgb(210,229,1)" fg:x="651" fg:w="14"/><text x="1.7664%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.01%)</title><rect x="1.5513%" y="389" width="0.0116%" height="15" fill="rgb(222,148,37)" fg:x="666" fg:w="5"/><text x="1.8013%" y="399.50"></text></g><g><title>__memcpy_generic (5 samples, 0.01%)</title><rect x="1.5513%" y="373" width="0.0116%" height="15" fill="rgb(234,67,33)" fg:x="666" fg:w="5"/><text x="1.8013%" y="383.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.02%)</title><rect x="1.5490%" y="453" width="0.0186%" height="15" fill="rgb(247,98,35)" fg:x="665" fg:w="8"/><text x="1.7990%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.02%)</title><rect x="1.5490%" y="437" width="0.0186%" height="15" fill="rgb(247,138,52)" fg:x="665" fg:w="8"/><text x="1.7990%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.02%)</title><rect x="1.5490%" y="421" width="0.0186%" height="15" fill="rgb(213,79,30)" fg:x="665" fg:w="8"/><text x="1.7990%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.02%)</title><rect x="1.5490%" y="405" width="0.0186%" height="15" fill="rgb(246,177,23)" fg:x="665" fg:w="8"/><text x="1.7990%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max (5 samples, 0.01%)</title><rect x="1.5769%" y="453" width="0.0116%" height="15" fill="rgb(230,62,27)" fg:x="677" fg:w="5"/><text x="1.8269%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (5 samples, 0.01%)</title><rect x="1.5769%" y="437" width="0.0116%" height="15" fill="rgb(216,154,8)" fg:x="677" fg:w="5"/><text x="1.8269%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (5 samples, 0.01%)</title><rect x="1.5769%" y="421" width="0.0116%" height="15" fill="rgb(244,35,45)" fg:x="677" fg:w="5"/><text x="1.8269%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="1.5769%" y="405" width="0.0116%" height="15" fill="rgb(251,115,12)" fg:x="677" fg:w="5"/><text x="1.8269%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="1.5769%" y="389" width="0.0116%" height="15" fill="rgb(240,54,50)" fg:x="677" fg:w="5"/><text x="1.8269%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (6 samples, 0.01%)</title><rect x="1.5886%" y="453" width="0.0140%" height="15" fill="rgb(233,84,52)" fg:x="682" fg:w="6"/><text x="1.8386%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (6 samples, 0.01%)</title><rect x="1.5886%" y="437" width="0.0140%" height="15" fill="rgb(207,117,47)" fg:x="682" fg:w="6"/><text x="1.8386%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (6 samples, 0.01%)</title><rect x="1.5886%" y="421" width="0.0140%" height="15" fill="rgb(249,43,39)" fg:x="682" fg:w="6"/><text x="1.8386%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="1.5886%" y="405" width="0.0140%" height="15" fill="rgb(209,38,44)" fg:x="682" fg:w="6"/><text x="1.8386%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="1.5886%" y="389" width="0.0140%" height="15" fill="rgb(236,212,23)" fg:x="682" fg:w="6"/><text x="1.8386%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5 samples, 0.01%)</title><rect x="1.6025%" y="453" width="0.0116%" height="15" fill="rgb(242,79,21)" fg:x="688" fg:w="5"/><text x="1.8525%" y="463.50"></text></g><g><title>&lt;u128 as core::iter::traits::accum::Sum&gt;::sum (5 samples, 0.01%)</title><rect x="1.6025%" y="437" width="0.0116%" height="15" fill="rgb(211,96,35)" fg:x="688" fg:w="5"/><text x="1.8525%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="1.6025%" y="421" width="0.0116%" height="15" fill="rgb(253,215,40)" fg:x="688" fg:w="5"/><text x="1.8525%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="1.6025%" y="405" width="0.0116%" height="15" fill="rgb(211,81,21)" fg:x="688" fg:w="5"/><text x="1.8525%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (33 samples, 0.08%)</title><rect x="1.6142%" y="453" width="0.0769%" height="15" fill="rgb(208,190,38)" fg:x="693" fg:w="33"/><text x="1.8642%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (33 samples, 0.08%)</title><rect x="1.6142%" y="437" width="0.0769%" height="15" fill="rgb(235,213,38)" fg:x="693" fg:w="33"/><text x="1.8642%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (33 samples, 0.08%)</title><rect x="1.6142%" y="421" width="0.0769%" height="15" fill="rgb(237,122,38)" fg:x="693" fg:w="33"/><text x="1.8642%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.08%)</title><rect x="1.6142%" y="405" width="0.0769%" height="15" fill="rgb(244,218,35)" fg:x="693" fg:w="33"/><text x="1.8642%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.08%)</title><rect x="1.6142%" y="389" width="0.0769%" height="15" fill="rgb(240,68,47)" fg:x="693" fg:w="33"/><text x="1.8642%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.08%)</title><rect x="1.6142%" y="373" width="0.0769%" height="15" fill="rgb(210,16,53)" fg:x="693" fg:w="33"/><text x="1.8642%" y="383.50"></text></g><g><title>__rdl_dealloc (33 samples, 0.08%)</title><rect x="1.6142%" y="357" width="0.0769%" height="15" fill="rgb(235,124,12)" fg:x="693" fg:w="33"/><text x="1.8642%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (33 samples, 0.08%)</title><rect x="1.6142%" y="341" width="0.0769%" height="15" fill="rgb(224,169,11)" fg:x="693" fg:w="33"/><text x="1.8642%" y="351.50"></text></g><g><title>__GI___libc_free (30 samples, 0.07%)</title><rect x="1.6212%" y="325" width="0.0699%" height="15" fill="rgb(250,166,2)" fg:x="696" fg:w="30"/><text x="1.8712%" y="335.50"></text></g><g><title>_int_free (22 samples, 0.05%)</title><rect x="1.6398%" y="309" width="0.0512%" height="15" fill="rgb(242,216,29)" fg:x="704" fg:w="22"/><text x="1.8898%" y="319.50"></text></g><g><title>os_based::analyze (332 samples, 0.77%)</title><rect x="0.9364%" y="469" width="0.7733%" height="15" fill="rgb(230,116,27)" fg:x="402" fg:w="332"/><text x="1.1864%" y="479.50"></text></g><g><title>core::time::Duration::as_micros (8 samples, 0.02%)</title><rect x="1.6910%" y="453" width="0.0186%" height="15" fill="rgb(228,99,48)" fg:x="726" fg:w="8"/><text x="1.9410%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (68 samples, 0.16%)</title><rect x="2.8138%" y="453" width="0.1584%" height="15" fill="rgb(253,11,6)" fg:x="1208" fg:w="68"/><text x="3.0638%" y="463.50"></text></g><g><title>core::time::Duration::as_secs_f64 (7 samples, 0.02%)</title><rect x="2.9721%" y="453" width="0.0163%" height="15" fill="rgb(247,143,39)" fg:x="1276" fg:w="7"/><text x="3.2221%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (6 samples, 0.01%)</title><rect x="3.0071%" y="437" width="0.0140%" height="15" fill="rgb(236,97,10)" fg:x="1291" fg:w="6"/><text x="3.2571%" y="447.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (6 samples, 0.01%)</title><rect x="3.0071%" y="421" width="0.0140%" height="15" fill="rgb(233,208,19)" fg:x="1291" fg:w="6"/><text x="3.2571%" y="431.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (6 samples, 0.01%)</title><rect x="3.0071%" y="405" width="0.0140%" height="15" fill="rgb(216,164,2)" fg:x="1291" fg:w="6"/><text x="3.2571%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (6 samples, 0.01%)</title><rect x="3.0071%" y="389" width="0.0140%" height="15" fill="rgb(220,129,5)" fg:x="1291" fg:w="6"/><text x="3.2571%" y="399.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied::_{{closure}} (6 samples, 0.01%)</title><rect x="3.0071%" y="373" width="0.0140%" height="15" fill="rgb(242,17,10)" fg:x="1291" fg:w="6"/><text x="3.2571%" y="383.50"></text></g><g><title>checked_request2size (5 samples, 0.01%)</title><rect x="3.6686%" y="213" width="0.0116%" height="15" fill="rgb(242,107,0)" fg:x="1575" fg:w="5"/><text x="3.9186%" y="223.50"></text></g><g><title>__GI___libc_malloc (325 samples, 0.76%)</title><rect x="3.1072%" y="229" width="0.7570%" height="15" fill="rgb(251,28,31)" fg:x="1334" fg:w="325"/><text x="3.3572%" y="239.50"></text></g><g><title>tcache_get (79 samples, 0.18%)</title><rect x="3.6802%" y="213" width="0.1840%" height="15" fill="rgb(233,223,10)" fg:x="1580" fg:w="79"/><text x="3.9302%" y="223.50"></text></g><g><title>__rdl_alloc (350 samples, 0.82%)</title><rect x="3.1072%" y="261" width="0.8152%" height="15" fill="rgb(215,21,27)" fg:x="1334" fg:w="350"/><text x="3.3572%" y="271.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (350 samples, 0.82%)</title><rect x="3.1072%" y="245" width="0.8152%" height="15" fill="rgb(232,23,21)" fg:x="1334" fg:w="350"/><text x="3.3572%" y="255.50"></text></g><g><title>malloc@plt (25 samples, 0.06%)</title><rect x="3.8643%" y="229" width="0.0582%" height="15" fill="rgb(244,5,23)" fg:x="1659" fg:w="25"/><text x="4.1143%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (451 samples, 1.05%)</title><rect x="3.0211%" y="357" width="1.0505%" height="15" fill="rgb(226,81,46)" fg:x="1297" fg:w="451"/><text x="3.2711%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (451 samples, 1.05%)</title><rect x="3.0211%" y="341" width="1.0505%" height="15" fill="rgb(247,70,30)" fg:x="1297" fg:w="451"/><text x="3.2711%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (451 samples, 1.05%)</title><rect x="3.0211%" y="325" width="1.0505%" height="15" fill="rgb(212,68,19)" fg:x="1297" fg:w="451"/><text x="3.2711%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (414 samples, 0.96%)</title><rect x="3.1072%" y="309" width="0.9643%" height="15" fill="rgb(240,187,13)" fg:x="1334" fg:w="414"/><text x="3.3572%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (414 samples, 0.96%)</title><rect x="3.1072%" y="293" width="0.9643%" height="15" fill="rgb(223,113,26)" fg:x="1334" fg:w="414"/><text x="3.3572%" y="303.50"></text></g><g><title>alloc::alloc::alloc (414 samples, 0.96%)</title><rect x="3.1072%" y="277" width="0.9643%" height="15" fill="rgb(206,192,2)" fg:x="1334" fg:w="414"/><text x="3.3572%" y="287.50"></text></g><g><title>core::ptr::read_volatile (64 samples, 0.15%)</title><rect x="3.9225%" y="261" width="0.1491%" height="15" fill="rgb(241,108,4)" fg:x="1684" fg:w="64"/><text x="4.1725%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (490 samples, 1.14%)</title><rect x="3.0211%" y="421" width="1.1413%" height="15" fill="rgb(247,173,49)" fg:x="1297" fg:w="490"/><text x="3.2711%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (490 samples, 1.14%)</title><rect x="3.0211%" y="405" width="1.1413%" height="15" fill="rgb(224,114,35)" fg:x="1297" fg:w="490"/><text x="3.2711%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (490 samples, 1.14%)</title><rect x="3.0211%" y="389" width="1.1413%" height="15" fill="rgb(245,159,27)" fg:x="1297" fg:w="490"/><text x="3.2711%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (490 samples, 1.14%)</title><rect x="3.0211%" y="373" width="1.1413%" height="15" fill="rgb(245,172,44)" fg:x="1297" fg:w="490"/><text x="3.2711%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (39 samples, 0.09%)</title><rect x="4.0716%" y="357" width="0.0908%" height="15" fill="rgb(236,23,11)" fg:x="1748" fg:w="39"/><text x="4.3216%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.09%)</title><rect x="4.0716%" y="341" width="0.0908%" height="15" fill="rgb(205,117,38)" fg:x="1748" fg:w="39"/><text x="4.3216%" y="351.50"></text></g><g><title>_int_free (335 samples, 0.78%)</title><rect x="5.4435%" y="293" width="0.7803%" height="15" fill="rgb(237,72,25)" fg:x="2337" fg:w="335"/><text x="5.6935%" y="303.50"></text></g><g><title>tcache_put (22 samples, 0.05%)</title><rect x="6.1726%" y="277" width="0.0512%" height="15" fill="rgb(244,70,9)" fg:x="2650" fg:w="22"/><text x="6.4226%" y="287.50"></text></g><g><title>__GI___libc_free (914 samples, 2.13%)</title><rect x="4.2230%" y="309" width="2.1289%" height="15" fill="rgb(217,125,39)" fg:x="1813" fg:w="914"/><text x="4.4730%" y="319.50">_..</text></g><g><title>arena_for_chunk (55 samples, 0.13%)</title><rect x="6.2238%" y="293" width="0.1281%" height="15" fill="rgb(235,36,10)" fg:x="2672" fg:w="55"/><text x="6.4738%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,032 samples, 2.40%)</title><rect x="4.1624%" y="421" width="2.4038%" height="15" fill="rgb(251,123,47)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="431.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,032 samples, 2.40%)</title><rect x="4.1624%" y="405" width="2.4038%" height="15" fill="rgb(221,13,13)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="415.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,032 samples, 2.40%)</title><rect x="4.1624%" y="389" width="2.4038%" height="15" fill="rgb(238,131,9)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="399.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,032 samples, 2.40%)</title><rect x="4.1624%" y="373" width="2.4038%" height="15" fill="rgb(211,50,8)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="383.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (1,032 samples, 2.40%)</title><rect x="4.1624%" y="357" width="2.4038%" height="15" fill="rgb(245,182,24)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="367.50">al..</text></g><g><title>__rdl_dealloc (1,032 samples, 2.40%)</title><rect x="4.1624%" y="341" width="2.4038%" height="15" fill="rgb(242,14,37)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="351.50">__..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,032 samples, 2.40%)</title><rect x="4.1624%" y="325" width="2.4038%" height="15" fill="rgb(246,228,12)" fg:x="1787" fg:w="1032"/><text x="4.4124%" y="335.50">st..</text></g><g><title>free@plt (92 samples, 0.21%)</title><rect x="6.3519%" y="309" width="0.2143%" height="15" fill="rgb(213,55,15)" fg:x="2727" fg:w="92"/><text x="6.6019%" y="319.50"></text></g><g><title>ioctl (947 samples, 2.21%)</title><rect x="6.5918%" y="373" width="2.2058%" height="15" fill="rgb(209,9,3)" fg:x="2830" fg:w="947"/><text x="6.8418%" y="383.50">i..</text></g><g><title>[unknown] (635 samples, 1.48%)</title><rect x="7.3186%" y="357" width="1.4791%" height="15" fill="rgb(230,59,30)" fg:x="3142" fg:w="635"/><text x="7.5686%" y="367.50"></text></g><g><title>[unknown] (635 samples, 1.48%)</title><rect x="7.3186%" y="341" width="1.4791%" height="15" fill="rgb(209,121,21)" fg:x="3142" fg:w="635"/><text x="7.5686%" y="351.50"></text></g><g><title>[unknown] (635 samples, 1.48%)</title><rect x="7.3186%" y="325" width="1.4791%" height="15" fill="rgb(220,109,13)" fg:x="3142" fg:w="635"/><text x="7.5686%" y="335.50"></text></g><g><title>rppal::spi::ioctl::transfer (1,202 samples, 2.80%)</title><rect x="6.5662%" y="389" width="2.7998%" height="15" fill="rgb(232,18,1)" fg:x="2819" fg:w="1202"/><text x="6.8162%" y="399.50">rp..</text></g><g><title>ioctl@plt (244 samples, 0.57%)</title><rect x="8.7976%" y="373" width="0.5683%" height="15" fill="rgb(215,41,42)" fg:x="3777" fg:w="244"/><text x="9.0476%" y="383.50"></text></g><g><title>os_based::get_position (2,804 samples, 6.53%)</title><rect x="2.9884%" y="453" width="6.5313%" height="15" fill="rgb(224,123,36)" fg:x="1283" fg:w="2804"/><text x="3.2384%" y="463.50">os_based:..</text></g><g><title>rppal::spi::hal::&lt;impl embedded_hal::spi::SpiBus for rppal::spi::Spi&gt;::transfer_in_place (2,790 samples, 6.50%)</title><rect x="3.0211%" y="437" width="6.4986%" height="15" fill="rgb(240,125,3)" fg:x="1297" fg:w="2790"/><text x="3.2711%" y="447.50">rppal::sp..</text></g><g><title>rppal::spi::hal::&lt;impl embedded_hal::spi::SpiBus for rppal::spi::Spi&gt;::transfer (1,268 samples, 2.95%)</title><rect x="6.5662%" y="421" width="2.9535%" height="15" fill="rgb(205,98,50)" fg:x="2819" fg:w="1268"/><text x="6.8162%" y="431.50">rpp..</text></g><g><title>rppal::spi::Spi::transfer (1,268 samples, 2.95%)</title><rect x="6.5662%" y="405" width="2.9535%" height="15" fill="rgb(205,185,37)" fg:x="2819" fg:w="1268"/><text x="6.8162%" y="415.50">rpp..</text></g><g><title>rppal::spi::segment::Segment::new (66 samples, 0.15%)</title><rect x="9.3660%" y="389" width="0.1537%" height="15" fill="rgb(238,207,15)" fg:x="4021" fg:w="66"/><text x="9.6160%" y="399.50"></text></g><g><title>rppal::spi::segment::Segment::with_settings (66 samples, 0.15%)</title><rect x="9.3660%" y="373" width="0.1537%" height="15" fill="rgb(213,199,42)" fg:x="4021" fg:w="66"/><text x="9.6160%" y="383.50"></text></g><g><title>pid_ctrl::KDTerm&lt;T&gt;::step (176 samples, 0.41%)</title><rect x="9.5383%" y="437" width="0.4100%" height="15" fill="rgb(235,201,11)" fg:x="4095" fg:w="176"/><text x="9.7883%" y="447.50"></text></g><g><title>pid_ctrl::KITerm&lt;T&gt;::step (34 samples, 0.08%)</title><rect x="9.9483%" y="437" width="0.0792%" height="15" fill="rgb(207,46,11)" fg:x="4271" fg:w="34"/><text x="10.1983%" y="447.50"></text></g><g><title>pid_ctrl::PidCtrl&lt;T&gt;::step (241 samples, 0.56%)</title><rect x="9.5197%" y="453" width="0.5614%" height="15" fill="rgb(241,35,35)" fg:x="4087" fg:w="241"/><text x="9.7697%" y="463.50"></text></g><g><title>pid_ctrl::KPTerm&lt;T&gt;::step (23 samples, 0.05%)</title><rect x="10.0275%" y="437" width="0.0536%" height="15" fill="rgb(243,32,47)" fg:x="4305" fg:w="23"/><text x="10.2775%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (67 samples, 0.16%)</title><rect x="10.3885%" y="421" width="0.1561%" height="15" fill="rgb(247,202,23)" fg:x="4460" fg:w="67"/><text x="10.6385%" y="431.50"></text></g><g><title>checked_request2size (8 samples, 0.02%)</title><rect x="11.0803%" y="181" width="0.0186%" height="15" fill="rgb(219,102,11)" fg:x="4757" fg:w="8"/><text x="11.3303%" y="191.50"></text></g><g><title>__GI___libc_malloc (240 samples, 0.56%)</title><rect x="10.8334%" y="197" width="0.5590%" height="15" fill="rgb(243,110,44)" fg:x="4651" fg:w="240"/><text x="11.0834%" y="207.50"></text></g><g><title>tcache_get (126 samples, 0.29%)</title><rect x="11.0989%" y="181" width="0.2935%" height="15" fill="rgb(222,74,54)" fg:x="4765" fg:w="126"/><text x="11.3489%" y="191.50"></text></g><g><title>__rdl_alloc (277 samples, 0.65%)</title><rect x="10.8288%" y="229" width="0.6452%" height="15" fill="rgb(216,99,12)" fg:x="4649" fg:w="277"/><text x="11.0788%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (277 samples, 0.65%)</title><rect x="10.8288%" y="213" width="0.6452%" height="15" fill="rgb(226,22,26)" fg:x="4649" fg:w="277"/><text x="11.0788%" y="223.50"></text></g><g><title>malloc@plt (35 samples, 0.08%)</title><rect x="11.3924%" y="197" width="0.0815%" height="15" fill="rgb(217,163,10)" fg:x="4891" fg:w="35"/><text x="11.6424%" y="207.50"></text></g><g><title>alloc::string::String::with_capacity (305 samples, 0.71%)</title><rect x="10.7938%" y="357" width="0.7104%" height="15" fill="rgb(213,25,53)" fg:x="4634" fg:w="305"/><text x="11.0438%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (297 samples, 0.69%)</title><rect x="10.8124%" y="341" width="0.6918%" height="15" fill="rgb(252,105,26)" fg:x="4642" fg:w="297"/><text x="11.0624%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (297 samples, 0.69%)</title><rect x="10.8124%" y="325" width="0.6918%" height="15" fill="rgb(220,39,43)" fg:x="4642" fg:w="297"/><text x="11.0624%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (297 samples, 0.69%)</title><rect x="10.8124%" y="309" width="0.6918%" height="15" fill="rgb(229,68,48)" fg:x="4642" fg:w="297"/><text x="11.0624%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (297 samples, 0.69%)</title><rect x="10.8124%" y="293" width="0.6918%" height="15" fill="rgb(252,8,32)" fg:x="4642" fg:w="297"/><text x="11.0624%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (290 samples, 0.68%)</title><rect x="10.8288%" y="277" width="0.6755%" height="15" fill="rgb(223,20,43)" fg:x="4649" fg:w="290"/><text x="11.0788%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (290 samples, 0.68%)</title><rect x="10.8288%" y="261" width="0.6755%" height="15" fill="rgb(229,81,49)" fg:x="4649" fg:w="290"/><text x="11.0788%" y="271.50"></text></g><g><title>alloc::alloc::alloc (290 samples, 0.68%)</title><rect x="10.8288%" y="245" width="0.6755%" height="15" fill="rgb(236,28,36)" fg:x="4649" fg:w="290"/><text x="11.0788%" y="255.50"></text></g><g><title>core::ptr::read_volatile (13 samples, 0.03%)</title><rect x="11.4740%" y="229" width="0.0303%" height="15" fill="rgb(249,185,26)" fg:x="4926" fg:w="13"/><text x="11.7240%" y="239.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (335 samples, 0.78%)</title><rect x="11.5042%" y="357" width="0.7803%" height="15" fill="rgb(249,174,33)" fg:x="4939" fg:w="335"/><text x="11.7542%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (312 samples, 0.73%)</title><rect x="11.5578%" y="341" width="0.7267%" height="15" fill="rgb(233,201,37)" fg:x="4962" fg:w="312"/><text x="11.8078%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (312 samples, 0.73%)</title><rect x="11.5578%" y="325" width="0.7267%" height="15" fill="rgb(221,78,26)" fg:x="4962" fg:w="312"/><text x="11.8078%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (312 samples, 0.73%)</title><rect x="11.5578%" y="309" width="0.7267%" height="15" fill="rgb(250,127,30)" fg:x="4962" fg:w="312"/><text x="11.8078%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (312 samples, 0.73%)</title><rect x="11.5578%" y="293" width="0.7267%" height="15" fill="rgb(230,49,44)" fg:x="4962" fg:w="312"/><text x="11.8078%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (48 samples, 0.11%)</title><rect x="14.3529%" y="229" width="0.1118%" height="15" fill="rgb(229,67,23)" fg:x="6162" fg:w="48"/><text x="14.6029%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (48 samples, 0.11%)</title><rect x="14.3529%" y="213" width="0.1118%" height="15" fill="rgb(249,83,47)" fg:x="6162" fg:w="48"/><text x="14.6029%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (53 samples, 0.12%)</title><rect x="14.4647%" y="229" width="0.1235%" height="15" fill="rgb(215,43,3)" fg:x="6210" fg:w="53"/><text x="14.7147%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.03%)</title><rect x="14.5579%" y="213" width="0.0303%" height="15" fill="rgb(238,154,13)" fg:x="6250" fg:w="13"/><text x="14.8079%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (13 samples, 0.03%)</title><rect x="14.5579%" y="197" width="0.0303%" height="15" fill="rgb(219,56,2)" fg:x="6250" fg:w="13"/><text x="14.8079%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (13 samples, 0.03%)</title><rect x="14.5579%" y="181" width="0.0303%" height="15" fill="rgb(233,0,4)" fg:x="6250" fg:w="13"/><text x="14.8079%" y="191.50"></text></g><g><title>__memcpy_generic (522 samples, 1.22%)</title><rect x="14.5882%" y="213" width="1.2159%" height="15" fill="rgb(235,30,7)" fg:x="6263" fg:w="522"/><text x="14.8382%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,177 samples, 2.74%)</title><rect x="13.4911%" y="309" width="2.7415%" height="15" fill="rgb(250,79,13)" fg:x="5792" fg:w="1177"/><text x="13.7411%" y="319.50">&lt;a..</text></g><g><title>alloc::string::String::push_str (828 samples, 1.93%)</title><rect x="14.3040%" y="293" width="1.9286%" height="15" fill="rgb(211,146,34)" fg:x="6141" fg:w="828"/><text x="14.5540%" y="303.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (828 samples, 1.93%)</title><rect x="14.3040%" y="277" width="1.9286%" height="15" fill="rgb(228,22,38)" fg:x="6141" fg:w="828"/><text x="14.5540%" y="287.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (828 samples, 1.93%)</title><rect x="14.3040%" y="261" width="1.9286%" height="15" fill="rgb(235,168,5)" fg:x="6141" fg:w="828"/><text x="14.5540%" y="271.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (828 samples, 1.93%)</title><rect x="14.3040%" y="245" width="1.9286%" height="15" fill="rgb(221,155,16)" fg:x="6141" fg:w="828"/><text x="14.5540%" y="255.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (706 samples, 1.64%)</title><rect x="14.5882%" y="229" width="1.6445%" height="15" fill="rgb(215,215,53)" fg:x="6263" fg:w="706"/><text x="14.8382%" y="239.50"></text></g><g><title>memcpy@plt (184 samples, 0.43%)</title><rect x="15.8041%" y="213" width="0.4286%" height="15" fill="rgb(223,4,10)" fg:x="6785" fg:w="184"/><text x="16.0541%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.04%)</title><rect x="16.2326%" y="309" width="0.0443%" height="15" fill="rgb(234,103,6)" fg:x="6969" fg:w="19"/><text x="16.4826%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.04%)</title><rect x="16.2326%" y="293" width="0.0443%" height="15" fill="rgb(227,97,0)" fg:x="6969" fg:w="19"/><text x="16.4826%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.11%)</title><rect x="16.2769%" y="309" width="0.1071%" height="15" fill="rgb(234,150,53)" fg:x="6988" fg:w="46"/><text x="16.5269%" y="319.50"></text></g><g><title>core::fmt::Formatter::new (123 samples, 0.29%)</title><rect x="16.3840%" y="309" width="0.2865%" height="15" fill="rgb(228,201,54)" fg:x="7034" fg:w="123"/><text x="16.6340%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (40 samples, 0.09%)</title><rect x="17.9516%" y="181" width="0.0932%" height="15" fill="rgb(222,22,37)" fg:x="7707" fg:w="40"/><text x="18.2016%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (40 samples, 0.09%)</title><rect x="17.9516%" y="165" width="0.0932%" height="15" fill="rgb(237,53,32)" fg:x="7707" fg:w="40"/><text x="18.2016%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (21 samples, 0.05%)</title><rect x="18.0448%" y="181" width="0.0489%" height="15" fill="rgb(233,25,53)" fg:x="7747" fg:w="21"/><text x="18.2948%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.04%)</title><rect x="18.0565%" y="165" width="0.0373%" height="15" fill="rgb(210,40,34)" fg:x="7752" fg:w="16"/><text x="18.3065%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (15 samples, 0.03%)</title><rect x="18.0588%" y="149" width="0.0349%" height="15" fill="rgb(241,220,44)" fg:x="7753" fg:w="15"/><text x="18.3088%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (15 samples, 0.03%)</title><rect x="18.0588%" y="133" width="0.0349%" height="15" fill="rgb(235,28,35)" fg:x="7753" fg:w="15"/><text x="18.3088%" y="143.50"></text></g><g><title>__memcpy_generic (327 samples, 0.76%)</title><rect x="18.0937%" y="165" width="0.7617%" height="15" fill="rgb(210,56,17)" fg:x="7768" fg:w="327"/><text x="18.3437%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (501 samples, 1.17%)</title><rect x="17.7141%" y="261" width="1.1670%" height="15" fill="rgb(224,130,29)" fg:x="7605" fg:w="501"/><text x="17.9641%" y="271.50"></text></g><g><title>alloc::string::String::push_str (433 samples, 1.01%)</title><rect x="17.8724%" y="245" width="1.0086%" height="15" fill="rgb(235,212,8)" fg:x="7673" fg:w="433"/><text x="18.1224%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (433 samples, 1.01%)</title><rect x="17.8724%" y="229" width="1.0086%" height="15" fill="rgb(223,33,50)" fg:x="7673" fg:w="433"/><text x="18.1224%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (433 samples, 1.01%)</title><rect x="17.8724%" y="213" width="1.0086%" height="15" fill="rgb(219,149,13)" fg:x="7673" fg:w="433"/><text x="18.1224%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (433 samples, 1.01%)</title><rect x="17.8724%" y="197" width="1.0086%" height="15" fill="rgb(250,156,29)" fg:x="7673" fg:w="433"/><text x="18.1224%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (338 samples, 0.79%)</title><rect x="18.0937%" y="181" width="0.7873%" height="15" fill="rgb(216,193,19)" fg:x="7768" fg:w="338"/><text x="18.3437%" y="191.50"></text></g><g><title>memcpy@plt (11 samples, 0.03%)</title><rect x="18.8554%" y="165" width="0.0256%" height="15" fill="rgb(216,135,14)" fg:x="8095" fg:w="11"/><text x="19.1054%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.04%)</title><rect x="19.8477%" y="245" width="0.0396%" height="15" fill="rgb(241,47,5)" fg:x="8521" fg:w="17"/><text x="20.0977%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral (842 samples, 1.96%)</title><rect x="18.8810%" y="261" width="1.9612%" height="15" fill="rgb(233,42,35)" fg:x="8106" fg:w="842"/><text x="19.1310%" y="271.50">c..</text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (410 samples, 0.95%)</title><rect x="19.8873%" y="245" width="0.9550%" height="15" fill="rgb(231,13,6)" fg:x="8538" fg:w="410"/><text x="20.1373%" y="255.50"></text></g><g><title>core::fmt::Write::write_fmt (3,684 samples, 8.58%)</title><rect x="12.2845%" y="357" width="8.5810%" height="15" fill="rgb(207,181,40)" fg:x="5274" fg:w="3684"/><text x="12.5345%" y="367.50">core::fmt::W..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (3,684 samples, 8.58%)</title><rect x="12.2845%" y="341" width="8.5810%" height="15" fill="rgb(254,173,49)" fg:x="5274" fg:w="3684"/><text x="12.5345%" y="351.50">&lt;&amp;mut W as c..</text></g><g><title>core::fmt::write (3,682 samples, 8.58%)</title><rect x="12.2892%" y="325" width="8.5764%" height="15" fill="rgb(221,1,38)" fg:x="5276" fg:w="3682"/><text x="12.5392%" y="335.50">core::fmt::w..</text></g><g><title>core::fmt::rt::Argument::fmt (1,801 samples, 4.20%)</title><rect x="16.6705%" y="309" width="4.1950%" height="15" fill="rgb(206,124,46)" fg:x="7157" fg:w="1801"/><text x="16.9205%" y="319.50">core:..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1,801 samples, 4.20%)</title><rect x="16.6705%" y="293" width="4.1950%" height="15" fill="rgb(249,21,11)" fg:x="7157" fg:w="1801"/><text x="16.9205%" y="303.50">core:..</text></g><g><title>core::fmt::num::imp::fmt_u64 (1,564 samples, 3.64%)</title><rect x="17.2226%" y="277" width="3.6430%" height="15" fill="rgb(222,201,40)" fg:x="7394" fg:w="1564"/><text x="17.4726%" y="287.50">core..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (10 samples, 0.02%)</title><rect x="20.8423%" y="261" width="0.0233%" height="15" fill="rgb(235,61,29)" fg:x="8948" fg:w="10"/><text x="21.0923%" y="271.50"></text></g><g><title>alloc::fmt::format (4,438 samples, 10.34%)</title><rect x="10.5446%" y="421" width="10.3373%" height="15" fill="rgb(219,207,3)" fg:x="4527" fg:w="4438"/><text x="10.7946%" y="431.50">alloc::fmt::for..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (4,438 samples, 10.34%)</title><rect x="10.5446%" y="405" width="10.3373%" height="15" fill="rgb(222,56,46)" fg:x="4527" fg:w="4438"/><text x="10.7946%" y="415.50">core::option::O..</text></g><g><title>alloc::fmt::format::_{{closure}} (4,438 samples, 10.34%)</title><rect x="10.5446%" y="389" width="10.3373%" height="15" fill="rgb(239,76,54)" fg:x="4527" fg:w="4438"/><text x="10.7946%" y="399.50">alloc::fmt::for..</text></g><g><title>alloc::fmt::format::format_inner (4,438 samples, 10.34%)</title><rect x="10.5446%" y="373" width="10.3373%" height="15" fill="rgb(231,124,27)" fg:x="4527" fg:w="4438"/><text x="10.7946%" y="383.50">alloc::fmt::for..</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (7 samples, 0.02%)</title><rect x="20.8656%" y="357" width="0.0163%" height="15" fill="rgb(249,195,6)" fg:x="8958" fg:w="7"/><text x="21.1156%" y="367.50"></text></g><g><title>core::fmt::Arguments::new_v1 (50 samples, 0.12%)</title><rect x="20.8819%" y="421" width="0.1165%" height="15" fill="rgb(237,174,47)" fg:x="8965" fg:w="50"/><text x="21.1319%" y="431.50"></text></g><g><title>free_perturb (5 samples, 0.01%)</title><rect x="24.2733%" y="261" width="0.0116%" height="15" fill="rgb(206,201,31)" fg:x="10421" fg:w="5"/><text x="24.5233%" y="271.50"></text></g><g><title>_int_free (1,278 samples, 2.98%)</title><rect x="21.3617%" y="277" width="2.9768%" height="15" fill="rgb(231,57,52)" fg:x="9171" fg:w="1278"/><text x="21.6117%" y="287.50">_in..</text></g><g><title>get_max_fast (23 samples, 0.05%)</title><rect x="24.2849%" y="261" width="0.0536%" height="15" fill="rgb(248,177,22)" fg:x="10426" fg:w="23"/><text x="24.5349%" y="271.50"></text></g><g><title>__GI___libc_free (1,433 samples, 3.34%)</title><rect x="21.0100%" y="293" width="3.3378%" height="15" fill="rgb(215,211,37)" fg:x="9020" fg:w="1433"/><text x="21.2600%" y="303.50">__G..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,456 samples, 3.39%)</title><rect x="20.9983%" y="421" width="3.3914%" height="15" fill="rgb(241,128,51)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="431.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,456 samples, 3.39%)</title><rect x="20.9983%" y="405" width="3.3914%" height="15" fill="rgb(227,165,31)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="415.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,456 samples, 3.39%)</title><rect x="20.9983%" y="389" width="3.3914%" height="15" fill="rgb(228,167,24)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="399.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,456 samples, 3.39%)</title><rect x="20.9983%" y="373" width="3.3914%" height="15" fill="rgb(228,143,12)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="383.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,456 samples, 3.39%)</title><rect x="20.9983%" y="357" width="3.3914%" height="15" fill="rgb(249,149,8)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="367.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1,456 samples, 3.39%)</title><rect x="20.9983%" y="341" width="3.3914%" height="15" fill="rgb(243,35,44)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="351.50">all..</text></g><g><title>__rdl_dealloc (1,456 samples, 3.39%)</title><rect x="20.9983%" y="325" width="3.3914%" height="15" fill="rgb(246,89,9)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="335.50">__r..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,456 samples, 3.39%)</title><rect x="20.9983%" y="309" width="3.3914%" height="15" fill="rgb(233,213,13)" fg:x="9015" fg:w="1456"/><text x="21.2483%" y="319.50">std..</text></g><g><title>free@plt (18 samples, 0.04%)</title><rect x="24.3478%" y="293" width="0.0419%" height="15" fill="rgb(233,141,41)" fg:x="10453" fg:w="18"/><text x="24.5978%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (366 samples, 0.85%)</title><rect x="24.3897%" y="421" width="0.8525%" height="15" fill="rgb(239,167,4)" fg:x="10471" fg:w="366"/><text x="24.6397%" y="431.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (366 samples, 0.85%)</title><rect x="24.3897%" y="405" width="0.8525%" height="15" fill="rgb(209,217,16)" fg:x="10471" fg:w="366"/><text x="24.6397%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (366 samples, 0.85%)</title><rect x="24.3897%" y="389" width="0.8525%" height="15" fill="rgb(219,88,35)" fg:x="10471" fg:w="366"/><text x="24.6397%" y="399.50"></text></g><g><title>core::num::can_not_overflow (104 samples, 0.24%)</title><rect x="25.0000%" y="373" width="0.2422%" height="15" fill="rgb(220,193,23)" fg:x="10733" fg:w="104"/><text x="25.2500%" y="383.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (75 samples, 0.17%)</title><rect x="25.9387%" y="341" width="0.1747%" height="15" fill="rgb(230,90,52)" fg:x="11136" fg:w="75"/><text x="26.1887%" y="351.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim::_{{closure}} (75 samples, 0.17%)</title><rect x="25.9387%" y="325" width="0.1747%" height="15" fill="rgb(252,106,19)" fg:x="11136" fg:w="75"/><text x="26.1887%" y="335.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (75 samples, 0.17%)</title><rect x="25.9387%" y="309" width="0.1747%" height="15" fill="rgb(206,74,20)" fg:x="11136" fg:w="75"/><text x="26.1887%" y="319.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (462 samples, 1.08%)</title><rect x="25.6522%" y="389" width="1.0761%" height="15" fill="rgb(230,138,44)" fg:x="11013" fg:w="462"/><text x="25.9022%" y="399.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (462 samples, 1.08%)</title><rect x="25.6522%" y="373" width="1.0761%" height="15" fill="rgb(235,182,43)" fg:x="11013" fg:w="462"/><text x="25.9022%" y="383.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (462 samples, 1.08%)</title><rect x="25.6522%" y="357" width="1.0761%" height="15" fill="rgb(242,16,51)" fg:x="11013" fg:w="462"/><text x="25.9022%" y="367.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (264 samples, 0.61%)</title><rect x="26.1134%" y="341" width="0.6149%" height="15" fill="rgb(248,9,4)" fg:x="11211" fg:w="264"/><text x="26.3634%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (264 samples, 0.61%)</title><rect x="26.1134%" y="325" width="0.6149%" height="15" fill="rgb(210,31,22)" fg:x="11211" fg:w="264"/><text x="26.3634%" y="335.50"></text></g><g><title>core::str::validations::next_code_point_reverse (264 samples, 0.61%)</title><rect x="26.1134%" y="309" width="0.6149%" height="15" fill="rgb(239,54,39)" fg:x="11211" fg:w="264"/><text x="26.3634%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (16 samples, 0.04%)</title><rect x="26.6910%" y="293" width="0.0373%" height="15" fill="rgb(230,99,41)" fg:x="11459" fg:w="16"/><text x="26.9410%" y="303.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (67 samples, 0.16%)</title><rect x="26.7516%" y="341" width="0.1561%" height="15" fill="rgb(253,106,12)" fg:x="11485" fg:w="67"/><text x="27.0016%" y="351.50"></text></g><g><title>core::str::_&lt;impl str&gt;::trim::_{{closure}} (67 samples, 0.16%)</title><rect x="26.7516%" y="325" width="0.1561%" height="15" fill="rgb(213,46,41)" fg:x="11485" fg:w="67"/><text x="27.0016%" y="335.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_whitespace (67 samples, 0.16%)</title><rect x="26.7516%" y="309" width="0.1561%" height="15" fill="rgb(215,133,35)" fg:x="11485" fg:w="67"/><text x="27.0016%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (841 samples, 1.96%)</title><rect x="25.2422%" y="421" width="1.9589%" height="15" fill="rgb(213,28,5)" fg:x="10837" fg:w="841"/><text x="25.4922%" y="431.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (841 samples, 1.96%)</title><rect x="25.2422%" y="405" width="1.9589%" height="15" fill="rgb(215,77,49)" fg:x="10837" fg:w="841"/><text x="25.4922%" y="415.50">c..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject (203 samples, 0.47%)</title><rect x="26.7283%" y="389" width="0.4728%" height="15" fill="rgb(248,100,22)" fg:x="11475" fg:w="203"/><text x="26.9783%" y="399.50"></text></g><g><title>core::str::pattern::Searcher::next_reject (203 samples, 0.47%)</title><rect x="26.7283%" y="373" width="0.4728%" height="15" fill="rgb(208,67,9)" fg:x="11475" fg:w="203"/><text x="26.9783%" y="383.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (203 samples, 0.47%)</title><rect x="26.7283%" y="357" width="0.4728%" height="15" fill="rgb(219,133,21)" fg:x="11475" fg:w="203"/><text x="26.9783%" y="367.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.29%)</title><rect x="26.9077%" y="341" width="0.2935%" height="15" fill="rgb(246,46,29)" fg:x="11552" fg:w="126"/><text x="27.1577%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.29%)</title><rect x="26.9077%" y="325" width="0.2935%" height="15" fill="rgb(246,185,52)" fg:x="11552" fg:w="126"/><text x="27.1577%" y="335.50"></text></g><g><title>core::str::validations::next_code_point (126 samples, 0.29%)</title><rect x="26.9077%" y="309" width="0.2935%" height="15" fill="rgb(252,136,11)" fg:x="11552" fg:w="126"/><text x="27.1577%" y="319.50"></text></g><g><title>_int_free (642 samples, 1.50%)</title><rect x="28.6267%" y="261" width="1.4954%" height="15" fill="rgb(219,138,53)" fg:x="12290" fg:w="642"/><text x="28.8767%" y="271.50"></text></g><g><title>tcache_put (128 samples, 0.30%)</title><rect x="29.8239%" y="245" width="0.2981%" height="15" fill="rgb(211,51,23)" fg:x="12804" fg:w="128"/><text x="30.0739%" y="255.50"></text></g><g><title>__GI___libc_free (1,170 samples, 2.73%)</title><rect x="27.4900%" y="277" width="2.7252%" height="15" fill="rgb(247,221,28)" fg:x="11802" fg:w="1170"/><text x="27.7400%" y="287.50">__..</text></g><g><title>arena_for_chunk (40 samples, 0.09%)</title><rect x="30.1221%" y="261" width="0.0932%" height="15" fill="rgb(251,222,45)" fg:x="12932" fg:w="40"/><text x="30.3721%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,444 samples, 3.36%)</title><rect x="27.2291%" y="405" width="3.3635%" height="15" fill="rgb(217,162,53)" fg:x="11690" fg:w="1444"/><text x="27.4791%" y="415.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,444 samples, 3.36%)</title><rect x="27.2291%" y="389" width="3.3635%" height="15" fill="rgb(229,93,14)" fg:x="11690" fg:w="1444"/><text x="27.4791%" y="399.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,343 samples, 3.13%)</title><rect x="27.4644%" y="373" width="3.1282%" height="15" fill="rgb(209,67,49)" fg:x="11791" fg:w="1343"/><text x="27.7144%" y="383.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,343 samples, 3.13%)</title><rect x="27.4644%" y="357" width="3.1282%" height="15" fill="rgb(213,87,29)" fg:x="11791" fg:w="1343"/><text x="27.7144%" y="367.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,343 samples, 3.13%)</title><rect x="27.4644%" y="341" width="3.1282%" height="15" fill="rgb(205,151,52)" fg:x="11791" fg:w="1343"/><text x="27.7144%" y="351.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1,343 samples, 3.13%)</title><rect x="27.4644%" y="325" width="3.1282%" height="15" fill="rgb(253,215,39)" fg:x="11791" fg:w="1343"/><text x="27.7144%" y="335.50">all..</text></g><g><title>__rdl_dealloc (1,343 samples, 3.13%)</title><rect x="27.4644%" y="309" width="3.1282%" height="15" fill="rgb(221,220,41)" fg:x="11791" fg:w="1343"/><text x="27.7144%" y="319.50">__r..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,343 samples, 3.13%)</title><rect x="27.4644%" y="293" width="3.1282%" height="15" fill="rgb(218,133,21)" fg:x="11791" fg:w="1343"/><text x="27.7144%" y="303.50">std..</text></g><g><title>free@plt (162 samples, 0.38%)</title><rect x="30.2152%" y="277" width="0.3773%" height="15" fill="rgb(221,193,43)" fg:x="12972" fg:w="162"/><text x="30.4652%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.01%)</title><rect x="31.6221%" y="389" width="0.0116%" height="15" fill="rgb(240,128,52)" fg:x="13576" fg:w="5"/><text x="31.8721%" y="399.50"></text></g><g><title>alloc::string::String::new (45 samples, 0.10%)</title><rect x="31.6337%" y="389" width="0.1048%" height="15" fill="rgb(253,114,12)" fg:x="13581" fg:w="45"/><text x="31.8837%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (192 samples, 0.45%)</title><rect x="32.0157%" y="325" width="0.4472%" height="15" fill="rgb(215,223,47)" fg:x="13745" fg:w="192"/><text x="32.2657%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (32 samples, 0.07%)</title><rect x="32.4630%" y="325" width="0.0745%" height="15" fill="rgb(248,225,23)" fg:x="13937" fg:w="32"/><text x="32.7130%" y="335.50"></text></g><g><title>alloc_perturb (160 samples, 0.37%)</title><rect x="37.1751%" y="277" width="0.3727%" height="15" fill="rgb(250,108,0)" fg:x="15960" fg:w="160"/><text x="37.4251%" y="287.50"></text></g><g><title>checked_request2size (34 samples, 0.08%)</title><rect x="37.5477%" y="277" width="0.0792%" height="15" fill="rgb(228,208,7)" fg:x="16120" fg:w="34"/><text x="37.7977%" y="287.50"></text></g><g><title>_int_malloc (1,555 samples, 3.62%)</title><rect x="34.0143%" y="293" width="3.6220%" height="15" fill="rgb(244,45,10)" fg:x="14603" fg:w="1555"/><text x="34.2643%" y="303.50">_int..</text></g><g><title>arena_for_chunk (7 samples, 0.02%)</title><rect x="37.6363%" y="293" width="0.0163%" height="15" fill="rgb(207,125,25)" fg:x="16158" fg:w="7"/><text x="37.8863%" y="303.50"></text></g><g><title>checked_request2size (20 samples, 0.05%)</title><rect x="37.6526%" y="293" width="0.0466%" height="15" fill="rgb(210,195,18)" fg:x="16165" fg:w="20"/><text x="37.9026%" y="303.50"></text></g><g><title>tag_at (139 samples, 0.32%)</title><rect x="37.6992%" y="293" width="0.3238%" height="15" fill="rgb(249,80,12)" fg:x="16185" fg:w="139"/><text x="37.9492%" y="303.50"></text></g><g><title>__GI___libc_malloc (1,930 samples, 4.50%)</title><rect x="33.5880%" y="309" width="4.4955%" height="15" fill="rgb(221,65,9)" fg:x="14420" fg:w="1930"/><text x="33.8380%" y="319.50">__GI_..</text></g><g><title>tag_new_usable (26 samples, 0.06%)</title><rect x="38.0229%" y="293" width="0.0606%" height="15" fill="rgb(235,49,36)" fg:x="16324" fg:w="26"/><text x="38.2729%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (174 samples, 0.41%)</title><rect x="38.0835%" y="309" width="0.4053%" height="15" fill="rgb(225,32,20)" fg:x="16350" fg:w="174"/><text x="38.3335%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,697 samples, 6.28%)</title><rect x="32.5375%" y="325" width="6.2820%" height="15" fill="rgb(215,141,46)" fg:x="13969" fg:w="2697"/><text x="32.7875%" y="335.50">alloc::r..</text></g><g><title>malloc@plt (142 samples, 0.33%)</title><rect x="38.4888%" y="309" width="0.3308%" height="15" fill="rgb(250,160,47)" fg:x="16524" fg:w="142"/><text x="38.7388%" y="319.50"></text></g><g><title>alloc::string::String::try_reserve_exact (3,043 samples, 7.09%)</title><rect x="31.7386%" y="389" width="7.0880%" height="15" fill="rgb(216,222,40)" fg:x="13626" fg:w="3043"/><text x="31.9886%" y="399.50">alloc::str..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve_exact (3,043 samples, 7.09%)</title><rect x="31.7386%" y="373" width="7.0880%" height="15" fill="rgb(234,217,39)" fg:x="13626" fg:w="3043"/><text x="31.9886%" y="383.50">alloc::vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3,043 samples, 7.09%)</title><rect x="31.7386%" y="357" width="7.0880%" height="15" fill="rgb(207,178,40)" fg:x="13626" fg:w="3043"/><text x="31.9886%" y="367.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3,043 samples, 7.09%)</title><rect x="31.7386%" y="341" width="7.0880%" height="15" fill="rgb(221,136,13)" fg:x="13626" fg:w="3043"/><text x="31.9886%" y="351.50">alloc::raw..</text></g><g><title>__GI___close (726 samples, 1.69%)</title><rect x="38.8265%" y="309" width="1.6910%" height="15" fill="rgb(249,199,10)" fg:x="16669" fg:w="726"/><text x="39.0765%" y="319.50"></text></g><g><title>[unknown] (653 samples, 1.52%)</title><rect x="38.9966%" y="293" width="1.5210%" height="15" fill="rgb(249,222,13)" fg:x="16742" fg:w="653"/><text x="39.2466%" y="303.50"></text></g><g><title>[unknown] (653 samples, 1.52%)</title><rect x="38.9966%" y="277" width="1.5210%" height="15" fill="rgb(244,185,38)" fg:x="16742" fg:w="653"/><text x="39.2466%" y="287.50"></text></g><g><title>[unknown] (653 samples, 1.52%)</title><rect x="38.9966%" y="261" width="1.5210%" height="15" fill="rgb(236,202,9)" fg:x="16742" fg:w="653"/><text x="39.2466%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (965 samples, 2.25%)</title><rect x="38.8265%" y="389" width="2.2477%" height="15" fill="rgb(250,229,37)" fg:x="16669" fg:w="965"/><text x="39.0765%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fs::File&gt; (965 samples, 2.25%)</title><rect x="38.8265%" y="373" width="2.2477%" height="15" fill="rgb(206,174,23)" fg:x="16669" fg:w="965"/><text x="39.0765%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (965 samples, 2.25%)</title><rect x="38.8265%" y="357" width="2.2477%" height="15" fill="rgb(211,33,43)" fg:x="16669" fg:w="965"/><text x="39.0765%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (965 samples, 2.25%)</title><rect x="38.8265%" y="341" width="2.2477%" height="15" fill="rgb(245,58,50)" fg:x="16669" fg:w="965"/><text x="39.0765%" y="351.50">c..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (965 samples, 2.25%)</title><rect x="38.8265%" y="325" width="2.2477%" height="15" fill="rgb(244,68,36)" fg:x="16669" fg:w="965"/><text x="39.0765%" y="335.50">&lt;..</text></g><g><title>close@plt (239 samples, 0.56%)</title><rect x="40.5176%" y="309" width="0.5567%" height="15" fill="rgb(232,229,15)" fg:x="17395" fg:w="239"/><text x="40.7676%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (10 samples, 0.02%)</title><rect x="41.0743%" y="373" width="0.0233%" height="15" fill="rgb(254,30,23)" fg:x="17634" fg:w="10"/><text x="41.3243%" y="383.50"></text></g><g><title>core::mem::zeroed (261 samples, 0.61%)</title><rect x="42.3134%" y="341" width="0.6079%" height="15" fill="rgb(235,160,14)" fg:x="18166" fg:w="261"/><text x="42.5634%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (261 samples, 0.61%)</title><rect x="42.3134%" y="325" width="0.6079%" height="15" fill="rgb(212,155,44)" fg:x="18166" fg:w="261"/><text x="42.5634%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (261 samples, 0.61%)</title><rect x="42.3134%" y="309" width="0.6079%" height="15" fill="rgb(226,2,50)" fg:x="18166" fg:w="261"/><text x="42.5634%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (261 samples, 0.61%)</title><rect x="42.3134%" y="293" width="0.6079%" height="15" fill="rgb(234,177,6)" fg:x="18166" fg:w="261"/><text x="42.5634%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (174 samples, 0.41%)</title><rect x="42.9214%" y="341" width="0.4053%" height="15" fill="rgb(217,24,9)" fg:x="18427" fg:w="174"/><text x="43.1714%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (174 samples, 0.41%)</title><rect x="42.9214%" y="325" width="0.4053%" height="15" fill="rgb(220,13,46)" fg:x="18427" fg:w="174"/><text x="43.1714%" y="335.50"></text></g><g><title>libc::unix::linux_like::linux::makedev (9 samples, 0.02%)</title><rect x="43.3267%" y="341" width="0.0210%" height="15" fill="rgb(239,221,27)" fg:x="18601" fg:w="9"/><text x="43.5767%" y="351.50"></text></g><g><title>statx (816 samples, 1.90%)</title><rect x="43.9742%" y="325" width="1.9007%" height="15" fill="rgb(222,198,25)" fg:x="18879" fg:w="816"/><text x="44.2242%" y="335.50">s..</text></g><g><title>[unknown] (676 samples, 1.57%)</title><rect x="44.3003%" y="309" width="1.5746%" height="15" fill="rgb(211,99,13)" fg:x="19019" fg:w="676"/><text x="44.5503%" y="319.50"></text></g><g><title>[unknown] (676 samples, 1.57%)</title><rect x="44.3003%" y="293" width="1.5746%" height="15" fill="rgb(232,111,31)" fg:x="19019" fg:w="676"/><text x="44.5503%" y="303.50"></text></g><g><title>[unknown] (676 samples, 1.57%)</title><rect x="44.3003%" y="277" width="1.5746%" height="15" fill="rgb(245,82,37)" fg:x="19019" fg:w="676"/><text x="44.5503%" y="287.50"></text></g><g><title>std::fs::File::metadata (2,224 samples, 5.18%)</title><rect x="41.0743%" y="389" width="5.1803%" height="15" fill="rgb(227,149,46)" fg:x="17634" fg:w="2224"/><text x="41.3243%" y="399.50">std::f..</text></g><g><title>std::sys::pal::unix::fs::File::file_attr (2,214 samples, 5.16%)</title><rect x="41.0975%" y="373" width="5.1570%" height="15" fill="rgb(218,36,50)" fg:x="17644" fg:w="2214"/><text x="41.3475%" y="383.50">std::s..</text></g><g><title>std::sys::pal::unix::fs::try_statx (2,203 samples, 5.13%)</title><rect x="41.1232%" y="357" width="5.1314%" height="15" fill="rgb(226,80,48)" fg:x="17655" fg:w="2203"/><text x="41.3732%" y="367.50">std::s..</text></g><g><title>std::sys::pal::unix::fs::try_statx::statx (1,248 samples, 2.91%)</title><rect x="43.3476%" y="341" width="2.9069%" height="15" fill="rgb(238,224,15)" fg:x="18610" fg:w="1248"/><text x="43.5976%" y="351.50">st..</text></g><g><title>statx@plt (163 samples, 0.38%)</title><rect x="45.8749%" y="325" width="0.3797%" height="15" fill="rgb(241,136,10)" fg:x="19695" fg:w="163"/><text x="46.1249%" y="335.50"></text></g><g><title>std::fs::OpenOptions::new (70 samples, 0.16%)</title><rect x="46.2545%" y="373" width="0.1630%" height="15" fill="rgb(208,32,45)" fg:x="19858" fg:w="70"/><text x="46.5045%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (42 samples, 0.10%)</title><rect x="46.4176%" y="341" width="0.0978%" height="15" fill="rgb(207,135,9)" fg:x="19928" fg:w="42"/><text x="46.6676%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (18 samples, 0.04%)</title><rect x="47.4751%" y="229" width="0.0419%" height="15" fill="rgb(206,86,44)" fg:x="20382" fg:w="18"/><text x="47.7251%" y="239.50"></text></g><g><title>core::ptr::align_offset (18 samples, 0.04%)</title><rect x="47.4751%" y="213" width="0.0419%" height="15" fill="rgb(245,177,15)" fg:x="20382" fg:w="18"/><text x="47.7251%" y="223.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (445 samples, 1.04%)</title><rect x="46.5294%" y="277" width="1.0365%" height="15" fill="rgb(206,64,50)" fg:x="19976" fg:w="445"/><text x="46.7794%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (445 samples, 1.04%)</title><rect x="46.5294%" y="261" width="1.0365%" height="15" fill="rgb(234,36,40)" fg:x="19976" fg:w="445"/><text x="46.7794%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (445 samples, 1.04%)</title><rect x="46.5294%" y="245" width="1.0365%" height="15" fill="rgb(213,64,8)" fg:x="19976" fg:w="445"/><text x="46.7794%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_naive (21 samples, 0.05%)</title><rect x="47.5170%" y="229" width="0.0489%" height="15" fill="rgb(210,75,36)" fg:x="20400" fg:w="21"/><text x="47.7670%" y="239.50"></text></g><g><title>__memcpy_generic (99 samples, 0.23%)</title><rect x="47.5659%" y="261" width="0.2306%" height="15" fill="rgb(229,88,21)" fg:x="20421" fg:w="99"/><text x="47.8159%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (131 samples, 0.31%)</title><rect x="47.5659%" y="277" width="0.3051%" height="15" fill="rgb(252,204,47)" fg:x="20421" fg:w="131"/><text x="47.8159%" y="287.50"></text></g><g><title>memcpy@plt (32 samples, 0.07%)</title><rect x="47.7965%" y="261" width="0.0745%" height="15" fill="rgb(208,77,27)" fg:x="20520" fg:w="32"/><text x="48.0465%" y="271.50"></text></g><g><title>__libc_open64 (843 samples, 1.96%)</title><rect x="49.0962%" y="213" width="1.9636%" height="15" fill="rgb(221,76,26)" fg:x="21078" fg:w="843"/><text x="49.3462%" y="223.50">_..</text></g><g><title>[unknown] (635 samples, 1.48%)</title><rect x="49.5807%" y="197" width="1.4791%" height="15" fill="rgb(225,139,18)" fg:x="21286" fg:w="635"/><text x="49.8307%" y="207.50"></text></g><g><title>[unknown] (635 samples, 1.48%)</title><rect x="49.5807%" y="181" width="1.4791%" height="15" fill="rgb(230,137,11)" fg:x="21286" fg:w="635"/><text x="49.8307%" y="191.50"></text></g><g><title>[unknown] (635 samples, 1.48%)</title><rect x="49.5807%" y="165" width="1.4791%" height="15" fill="rgb(212,28,1)" fg:x="21286" fg:w="635"/><text x="49.8307%" y="175.50"></text></g><g><title>std::sys::pal::unix::cvt_r (1,102 samples, 2.57%)</title><rect x="49.0916%" y="245" width="2.5668%" height="15" fill="rgb(248,164,17)" fg:x="21076" fg:w="1102"/><text x="49.3416%" y="255.50">st..</text></g><g><title>std::sys::pal::unix::fs::File::open_c::_{{closure}} (1,100 samples, 2.56%)</title><rect x="49.0962%" y="229" width="2.5622%" height="15" fill="rgb(222,171,42)" fg:x="21078" fg:w="1100"/><text x="49.3462%" y="239.50">st..</text></g><g><title>open64@plt (257 samples, 0.60%)</title><rect x="51.0598%" y="213" width="0.5986%" height="15" fill="rgb(243,84,45)" fg:x="21921" fg:w="257"/><text x="51.3098%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::OpenOptions::get_access_mode (73 samples, 0.17%)</title><rect x="51.6584%" y="245" width="0.1700%" height="15" fill="rgb(252,49,23)" fg:x="22178" fg:w="73"/><text x="51.9084%" y="255.50"></text></g><g><title>std::fs::OpenOptions::open (2,450 samples, 5.71%)</title><rect x="46.4176%" y="373" width="5.7067%" height="15" fill="rgb(215,19,7)" fg:x="19928" fg:w="2450"/><text x="46.6676%" y="383.50">std::fs..</text></g><g><title>std::fs::OpenOptions::_open (2,450 samples, 5.71%)</title><rect x="46.4176%" y="357" width="5.7067%" height="15" fill="rgb(238,81,41)" fg:x="19928" fg:w="2450"/><text x="46.6676%" y="367.50">std::fs..</text></g><g><title>std::sys::pal::unix::fs::File::open (2,408 samples, 5.61%)</title><rect x="46.5154%" y="341" width="5.6089%" height="15" fill="rgb(210,199,37)" fg:x="19970" fg:w="2408"/><text x="46.7654%" y="351.50">std::sy..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (2,402 samples, 5.59%)</title><rect x="46.5294%" y="325" width="5.5949%" height="15" fill="rgb(244,192,49)" fg:x="19976" fg:w="2402"/><text x="46.7794%" y="335.50">std::sy..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (2,402 samples, 5.59%)</title><rect x="46.5294%" y="309" width="5.5949%" height="15" fill="rgb(226,211,11)" fg:x="19976" fg:w="2402"/><text x="46.7794%" y="319.50">std::sy..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (2,402 samples, 5.59%)</title><rect x="46.5294%" y="293" width="5.5949%" height="15" fill="rgb(236,162,54)" fg:x="19976" fg:w="2402"/><text x="46.7794%" y="303.50">std::sy..</text></g><g><title>std::sys::pal::unix::fs::File::open::_{{closure}} (1,822 samples, 4.24%)</title><rect x="47.8804%" y="277" width="4.2439%" height="15" fill="rgb(220,229,9)" fg:x="20556" fg:w="1822"/><text x="48.1304%" y="287.50">std::..</text></g><g><title>std::sys::pal::unix::fs::File::open_c (1,796 samples, 4.18%)</title><rect x="47.9409%" y="261" width="4.1834%" height="15" fill="rgb(250,87,22)" fg:x="20582" fg:w="1796"/><text x="48.1909%" y="271.50">std::..</text></g><g><title>std::sys::pal::unix::fs::OpenOptions::get_creation_mode (127 samples, 0.30%)</title><rect x="51.8285%" y="245" width="0.2958%" height="15" fill="rgb(239,43,17)" fg:x="22251" fg:w="127"/><text x="52.0785%" y="255.50"></text></g><g><title>std::fs::File::open (2,526 samples, 5.88%)</title><rect x="46.2545%" y="389" width="5.8837%" height="15" fill="rgb(231,177,25)" fg:x="19858" fg:w="2526"/><text x="46.5045%" y="399.50">std::fs..</text></g><g><title>std::fs::OpenOptions::read (6 samples, 0.01%)</title><rect x="52.1243%" y="373" width="0.0140%" height="15" fill="rgb(219,179,1)" fg:x="22378" fg:w="6"/><text x="52.3743%" y="383.50"></text></g><g><title>std::sys::pal::unix::fs::OpenOptions::read (6 samples, 0.01%)</title><rect x="52.1243%" y="357" width="0.0140%" height="15" fill="rgb(238,219,53)" fg:x="22378" fg:w="6"/><text x="52.3743%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::Guard&gt; (32 samples, 0.07%)</title><rect x="52.2431%" y="357" width="0.0745%" height="15" fill="rgb(232,167,36)" fg:x="22429" fg:w="32"/><text x="52.4931%" y="367.50"></text></g><g><title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (32 samples, 0.07%)</title><rect x="52.2431%" y="341" width="0.0745%" height="15" fill="rgb(244,19,51)" fg:x="22429" fg:w="32"/><text x="52.4931%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (32 samples, 0.07%)</title><rect x="52.2431%" y="325" width="0.0745%" height="15" fill="rgb(224,6,22)" fg:x="22429" fg:w="32"/><text x="52.4931%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (16 samples, 0.04%)</title><rect x="52.3176%" y="357" width="0.0373%" height="15" fill="rgb(224,145,5)" fg:x="22461" fg:w="16"/><text x="52.5676%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (16 samples, 0.04%)</title><rect x="52.3176%" y="341" width="0.0373%" height="15" fill="rgb(234,130,49)" fg:x="22461" fg:w="16"/><text x="52.5676%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (768 samples, 1.79%)</title><rect x="52.3549%" y="357" width="1.7889%" height="15" fill="rgb(254,6,2)" fg:x="22477" fg:w="768"/><text x="52.6049%" y="367.50">c..</text></g><g><title>core::str::validations::run_utf8_validation (356 samples, 0.83%)</title><rect x="53.3145%" y="341" width="0.8292%" height="15" fill="rgb(208,96,46)" fg:x="22889" fg:w="356"/><text x="53.5645%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (85 samples, 0.20%)</title><rect x="54.8542%" y="325" width="0.1980%" height="15" fill="rgb(239,3,39)" fg:x="23550" fg:w="85"/><text x="55.1042%" y="335.50"></text></g><g><title>__GI___libc_read (1,740 samples, 4.05%)</title><rect x="55.0638%" y="261" width="4.0529%" height="15" fill="rgb(233,210,1)" fg:x="23640" fg:w="1740"/><text x="55.3138%" y="271.50">__GI..</text></g><g><title>[unknown] (1,321 samples, 3.08%)</title><rect x="56.0398%" y="245" width="3.0770%" height="15" fill="rgb(244,137,37)" fg:x="24059" fg:w="1321"/><text x="56.2898%" y="255.50">[un..</text></g><g><title>[unknown] (1,321 samples, 3.08%)</title><rect x="56.0398%" y="229" width="3.0770%" height="15" fill="rgb(240,136,2)" fg:x="24059" fg:w="1321"/><text x="56.2898%" y="239.50">[un..</text></g><g><title>[unknown] (1,321 samples, 3.08%)</title><rect x="56.0398%" y="213" width="3.0770%" height="15" fill="rgb(239,18,37)" fg:x="24059" fg:w="1321"/><text x="56.2898%" y="223.50">[un..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1,984 samples, 4.62%)</title><rect x="55.0522%" y="325" width="4.6213%" height="15" fill="rgb(218,185,22)" fg:x="23635" fg:w="1984"/><text x="55.3022%" y="335.50">&lt;std:..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1,984 samples, 4.62%)</title><rect x="55.0522%" y="309" width="4.6213%" height="15" fill="rgb(225,218,4)" fg:x="23635" fg:w="1984"/><text x="55.3022%" y="319.50">&lt;&amp;std..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (1,984 samples, 4.62%)</title><rect x="55.0522%" y="293" width="4.6213%" height="15" fill="rgb(230,182,32)" fg:x="23635" fg:w="1984"/><text x="55.3022%" y="303.50">std::..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (1,984 samples, 4.62%)</title><rect x="55.0522%" y="277" width="4.6213%" height="15" fill="rgb(242,56,43)" fg:x="23635" fg:w="1984"/><text x="55.3022%" y="287.50">std::..</text></g><g><title>read@plt (239 samples, 0.56%)</title><rect x="59.1167%" y="261" width="0.5567%" height="15" fill="rgb(233,99,24)" fg:x="25380" fg:w="239"/><text x="59.3667%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::spare_capacity_mut (94 samples, 0.22%)</title><rect x="59.6804%" y="325" width="0.2190%" height="15" fill="rgb(234,209,42)" fg:x="25622" fg:w="94"/><text x="59.9304%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (94 samples, 0.22%)</title><rect x="59.6804%" y="309" width="0.2190%" height="15" fill="rgb(227,7,12)" fg:x="25622" fg:w="94"/><text x="59.9304%" y="319.50"></text></g><g><title>core::cmp::min (17 samples, 0.04%)</title><rect x="59.8994%" y="325" width="0.0396%" height="15" fill="rgb(245,203,43)" fg:x="25716" fg:w="17"/><text x="60.1494%" y="335.50"></text></g><g><title>core::cmp::Ord::min (17 samples, 0.04%)</title><rect x="59.8994%" y="309" width="0.0396%" height="15" fill="rgb(238,205,33)" fg:x="25716" fg:w="17"/><text x="60.1494%" y="319.50"></text></g><g><title>core::cmp::min_by (17 samples, 0.04%)</title><rect x="59.8994%" y="293" width="0.0396%" height="15" fill="rgb(231,56,7)" fg:x="25716" fg:w="17"/><text x="60.1494%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6 samples, 0.01%)</title><rect x="59.9390%" y="325" width="0.0140%" height="15" fill="rgb(244,186,29)" fg:x="25733" fg:w="6"/><text x="60.1890%" y="335.50"></text></g><g><title>std::io::default_read_to_end::_{{closure}} (6 samples, 0.01%)</title><rect x="59.9390%" y="309" width="0.0140%" height="15" fill="rgb(234,111,31)" fg:x="25733" fg:w="6"/><text x="60.1890%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_next_multiple_of (6 samples, 0.01%)</title><rect x="59.9390%" y="293" width="0.0140%" height="15" fill="rgb(241,149,10)" fg:x="25733" fg:w="6"/><text x="60.1890%" y="303.50"></text></g><g><title>rppal::pwm::sysfs::period (21,287 samples, 49.58%)</title><rect x="10.3885%" y="437" width="49.5831%" height="15" fill="rgb(249,206,44)" fg:x="4460" fg:w="21287"/><text x="10.6385%" y="447.50">rppal::pwm::sysfs::period</text></g><g><title>std::fs::read_to_string (14,069 samples, 32.77%)</title><rect x="27.2012%" y="421" width="32.7704%" height="15" fill="rgb(251,153,30)" fg:x="11678" fg:w="14069"/><text x="27.4512%" y="431.50">std::fs::read_to_string</text></g><g><title>std::fs::read_to_string::inner (12,613 samples, 29.38%)</title><rect x="30.5926%" y="405" width="29.3790%" height="15" fill="rgb(239,152,38)" fg:x="13134" fg:w="12613"/><text x="30.8426%" y="415.50">std::fs::read_to_string::inner</text></g><g><title>std::io::default_read_to_string (3,363 samples, 7.83%)</title><rect x="52.1383%" y="389" width="7.8333%" height="15" fill="rgb(249,139,47)" fg:x="22384" fg:w="3363"/><text x="52.3883%" y="399.50">std::io::de..</text></g><g><title>std::io::append_to_string (3,363 samples, 7.83%)</title><rect x="52.1383%" y="373" width="7.8333%" height="15" fill="rgb(244,64,35)" fg:x="22384" fg:w="3363"/><text x="52.3883%" y="383.50">std::io::ap..</text></g><g><title>std::io::default_read_to_string::_{{closure}} (2,502 samples, 5.83%)</title><rect x="54.1438%" y="357" width="5.8278%" height="15" fill="rgb(216,46,15)" fg:x="23245" fg:w="2502"/><text x="54.3938%" y="367.50">std::io..</text></g><g><title>std::io::default_read_to_end (2,502 samples, 5.83%)</title><rect x="54.1438%" y="341" width="5.8278%" height="15" fill="rgb(250,74,19)" fg:x="23245" fg:w="2502"/><text x="54.3938%" y="351.50">std::io..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (8 samples, 0.02%)</title><rect x="59.9529%" y="325" width="0.0186%" height="15" fill="rgb(249,42,33)" fg:x="25739" fg:w="8"/><text x="60.2029%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (192 samples, 0.45%)</title><rect x="60.8078%" y="421" width="0.4472%" height="15" fill="rgb(242,149,17)" fg:x="26106" fg:w="192"/><text x="61.0578%" y="431.50"></text></g><g><title>checked_request2size (6 samples, 0.01%)</title><rect x="62.9903%" y="181" width="0.0140%" height="15" fill="rgb(244,29,21)" fg:x="27043" fg:w="6"/><text x="63.2403%" y="191.50"></text></g><g><title>tag_new_usable (12 samples, 0.03%)</title><rect x="63.0043%" y="181" width="0.0280%" height="15" fill="rgb(220,130,37)" fg:x="27049" fg:w="12"/><text x="63.2543%" y="191.50"></text></g><g><title>__GI___libc_malloc (615 samples, 1.43%)</title><rect x="61.9841%" y="197" width="1.4325%" height="15" fill="rgb(211,67,2)" fg:x="26611" fg:w="615"/><text x="62.2341%" y="207.50"></text></g><g><title>tcache_get (165 samples, 0.38%)</title><rect x="63.0322%" y="181" width="0.3843%" height="15" fill="rgb(235,68,52)" fg:x="27061" fg:w="165"/><text x="63.2822%" y="191.50"></text></g><g><title>__rdl_alloc (667 samples, 1.55%)</title><rect x="61.9841%" y="229" width="1.5536%" height="15" fill="rgb(246,142,3)" fg:x="26611" fg:w="667"/><text x="62.2341%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (667 samples, 1.55%)</title><rect x="61.9841%" y="213" width="1.5536%" height="15" fill="rgb(241,25,7)" fg:x="26611" fg:w="667"/><text x="62.2341%" y="223.50"></text></g><g><title>malloc@plt (52 samples, 0.12%)</title><rect x="63.4166%" y="197" width="0.1211%" height="15" fill="rgb(242,119,39)" fg:x="27226" fg:w="52"/><text x="63.6666%" y="207.50"></text></g><g><title>alloc::string::String::with_capacity (758 samples, 1.77%)</title><rect x="61.8536%" y="357" width="1.7656%" height="15" fill="rgb(241,98,45)" fg:x="26555" fg:w="758"/><text x="62.1036%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (721 samples, 1.68%)</title><rect x="61.9398%" y="341" width="1.6794%" height="15" fill="rgb(254,28,30)" fg:x="26592" fg:w="721"/><text x="62.1898%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (721 samples, 1.68%)</title><rect x="61.9398%" y="325" width="1.6794%" height="15" fill="rgb(241,142,54)" fg:x="26592" fg:w="721"/><text x="62.1898%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (721 samples, 1.68%)</title><rect x="61.9398%" y="309" width="1.6794%" height="15" fill="rgb(222,85,15)" fg:x="26592" fg:w="721"/><text x="62.1898%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (721 samples, 1.68%)</title><rect x="61.9398%" y="293" width="1.6794%" height="15" fill="rgb(210,85,47)" fg:x="26592" fg:w="721"/><text x="62.1898%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (702 samples, 1.64%)</title><rect x="61.9841%" y="277" width="1.6351%" height="15" fill="rgb(224,206,25)" fg:x="26611" fg:w="702"/><text x="62.2341%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (702 samples, 1.64%)</title><rect x="61.9841%" y="261" width="1.6351%" height="15" fill="rgb(243,201,19)" fg:x="26611" fg:w="702"/><text x="62.2341%" y="271.50"></text></g><g><title>alloc::alloc::alloc (702 samples, 1.64%)</title><rect x="61.9841%" y="245" width="1.6351%" height="15" fill="rgb(236,59,4)" fg:x="26611" fg:w="702"/><text x="62.2341%" y="255.50"></text></g><g><title>core::ptr::read_volatile (35 samples, 0.08%)</title><rect x="63.5377%" y="229" width="0.0815%" height="15" fill="rgb(254,179,45)" fg:x="27278" fg:w="35"/><text x="63.7877%" y="239.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (214 samples, 0.50%)</title><rect x="63.6192%" y="357" width="0.4985%" height="15" fill="rgb(226,14,10)" fg:x="27313" fg:w="214"/><text x="63.8692%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (185 samples, 0.43%)</title><rect x="63.6868%" y="341" width="0.4309%" height="15" fill="rgb(244,27,41)" fg:x="27342" fg:w="185"/><text x="63.9368%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (185 samples, 0.43%)</title><rect x="63.6868%" y="325" width="0.4309%" height="15" fill="rgb(235,35,32)" fg:x="27342" fg:w="185"/><text x="63.9368%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (185 samples, 0.43%)</title><rect x="63.6868%" y="309" width="0.4309%" height="15" fill="rgb(218,68,31)" fg:x="27342" fg:w="185"/><text x="63.9368%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (185 samples, 0.43%)</title><rect x="63.6868%" y="293" width="0.4309%" height="15" fill="rgb(207,120,37)" fg:x="27342" fg:w="185"/><text x="63.9368%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (51 samples, 0.12%)</title><rect x="66.1465%" y="229" width="0.1188%" height="15" fill="rgb(227,98,0)" fg:x="28398" fg:w="51"/><text x="66.3965%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (51 samples, 0.12%)</title><rect x="66.1465%" y="213" width="0.1188%" height="15" fill="rgb(207,7,3)" fg:x="28398" fg:w="51"/><text x="66.3965%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (25 samples, 0.06%)</title><rect x="66.2653%" y="229" width="0.0582%" height="15" fill="rgb(206,98,19)" fg:x="28449" fg:w="25"/><text x="66.5153%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.04%)</title><rect x="66.2839%" y="213" width="0.0396%" height="15" fill="rgb(217,5,26)" fg:x="28457" fg:w="17"/><text x="66.5339%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (17 samples, 0.04%)</title><rect x="66.2839%" y="197" width="0.0396%" height="15" fill="rgb(235,190,38)" fg:x="28457" fg:w="17"/><text x="66.5339%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (17 samples, 0.04%)</title><rect x="66.2839%" y="181" width="0.0396%" height="15" fill="rgb(247,86,24)" fg:x="28457" fg:w="17"/><text x="66.5339%" y="191.50"></text></g><g><title>__memcpy_generic (389 samples, 0.91%)</title><rect x="66.3235%" y="213" width="0.9061%" height="15" fill="rgb(205,101,16)" fg:x="28474" fg:w="389"/><text x="66.5735%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (891 samples, 2.08%)</title><rect x="65.4803%" y="309" width="2.0754%" height="15" fill="rgb(246,168,33)" fg:x="28112" fg:w="891"/><text x="65.7303%" y="319.50">&lt;..</text></g><g><title>alloc::string::String::push_str (638 samples, 1.49%)</title><rect x="66.0696%" y="293" width="1.4861%" height="15" fill="rgb(231,114,1)" fg:x="28365" fg:w="638"/><text x="66.3196%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (638 samples, 1.49%)</title><rect x="66.0696%" y="277" width="1.4861%" height="15" fill="rgb(207,184,53)" fg:x="28365" fg:w="638"/><text x="66.3196%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (638 samples, 1.49%)</title><rect x="66.0696%" y="261" width="1.4861%" height="15" fill="rgb(224,95,51)" fg:x="28365" fg:w="638"/><text x="66.3196%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (638 samples, 1.49%)</title><rect x="66.0696%" y="245" width="1.4861%" height="15" fill="rgb(212,188,45)" fg:x="28365" fg:w="638"/><text x="66.3196%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (529 samples, 1.23%)</title><rect x="66.3235%" y="229" width="1.2322%" height="15" fill="rgb(223,154,38)" fg:x="28474" fg:w="529"/><text x="66.5735%" y="239.50"></text></g><g><title>memcpy@plt (140 samples, 0.33%)</title><rect x="67.2296%" y="213" width="0.3261%" height="15" fill="rgb(251,22,52)" fg:x="28863" fg:w="140"/><text x="67.4796%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.03%)</title><rect x="67.5557%" y="309" width="0.0303%" height="15" fill="rgb(229,209,22)" fg:x="29003" fg:w="13"/><text x="67.8057%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.03%)</title><rect x="67.5557%" y="293" width="0.0303%" height="15" fill="rgb(234,138,34)" fg:x="29003" fg:w="13"/><text x="67.8057%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (43 samples, 0.10%)</title><rect x="67.5859%" y="309" width="0.1002%" height="15" fill="rgb(212,95,11)" fg:x="29016" fg:w="43"/><text x="67.8359%" y="319.50"></text></g><g><title>core::fmt::Formatter::new (167 samples, 0.39%)</title><rect x="67.6861%" y="309" width="0.3890%" height="15" fill="rgb(240,179,47)" fg:x="29059" fg:w="167"/><text x="67.9361%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (41 samples, 0.10%)</title><rect x="69.3422%" y="181" width="0.0955%" height="15" fill="rgb(240,163,11)" fg:x="29770" fg:w="41"/><text x="69.5922%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (41 samples, 0.10%)</title><rect x="69.3422%" y="165" width="0.0955%" height="15" fill="rgb(236,37,12)" fg:x="29770" fg:w="41"/><text x="69.5922%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (18 samples, 0.04%)</title><rect x="69.4377%" y="181" width="0.0419%" height="15" fill="rgb(232,164,16)" fg:x="29811" fg:w="18"/><text x="69.6877%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.02%)</title><rect x="69.4633%" y="165" width="0.0163%" height="15" fill="rgb(244,205,15)" fg:x="29822" fg:w="7"/><text x="69.7133%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (7 samples, 0.02%)</title><rect x="69.4633%" y="149" width="0.0163%" height="15" fill="rgb(223,117,47)" fg:x="29822" fg:w="7"/><text x="69.7133%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (7 samples, 0.02%)</title><rect x="69.4633%" y="133" width="0.0163%" height="15" fill="rgb(244,107,35)" fg:x="29822" fg:w="7"/><text x="69.7133%" y="143.50"></text></g><g><title>__memcpy_generic (334 samples, 0.78%)</title><rect x="69.4796%" y="165" width="0.7780%" height="15" fill="rgb(205,140,8)" fg:x="29829" fg:w="334"/><text x="69.7296%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (522 samples, 1.22%)</title><rect x="69.0767%" y="261" width="1.2159%" height="15" fill="rgb(228,84,46)" fg:x="29656" fg:w="522"/><text x="69.3267%" y="271.50"></text></g><g><title>alloc::string::String::push_str (440 samples, 1.02%)</title><rect x="69.2677%" y="245" width="1.0249%" height="15" fill="rgb(254,188,9)" fg:x="29738" fg:w="440"/><text x="69.5177%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (440 samples, 1.02%)</title><rect x="69.2677%" y="229" width="1.0249%" height="15" fill="rgb(206,112,54)" fg:x="29738" fg:w="440"/><text x="69.5177%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (440 samples, 1.02%)</title><rect x="69.2677%" y="213" width="1.0249%" height="15" fill="rgb(216,84,49)" fg:x="29738" fg:w="440"/><text x="69.5177%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (440 samples, 1.02%)</title><rect x="69.2677%" y="197" width="1.0249%" height="15" fill="rgb(214,194,35)" fg:x="29738" fg:w="440"/><text x="69.5177%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (349 samples, 0.81%)</title><rect x="69.4796%" y="181" width="0.8129%" height="15" fill="rgb(249,28,3)" fg:x="29829" fg:w="349"/><text x="69.7296%" y="191.50"></text></g><g><title>memcpy@plt (15 samples, 0.03%)</title><rect x="70.2576%" y="165" width="0.0349%" height="15" fill="rgb(222,56,52)" fg:x="30163" fg:w="15"/><text x="70.5076%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (23 samples, 0.05%)</title><rect x="71.4036%" y="245" width="0.0536%" height="15" fill="rgb(245,217,50)" fg:x="30655" fg:w="23"/><text x="71.6536%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral (874 samples, 2.04%)</title><rect x="70.2926%" y="261" width="2.0358%" height="15" fill="rgb(213,201,24)" fg:x="30178" fg:w="874"/><text x="70.5426%" y="271.50">c..</text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (374 samples, 0.87%)</title><rect x="71.4572%" y="245" width="0.8711%" height="15" fill="rgb(248,116,28)" fg:x="30678" fg:w="374"/><text x="71.7072%" y="255.50"></text></g><g><title>core::fmt::Write::write_fmt (3,531 samples, 8.22%)</title><rect x="64.1177%" y="357" width="8.2246%" height="15" fill="rgb(219,72,43)" fg:x="27527" fg:w="3531"/><text x="64.3677%" y="367.50">core::fmt::..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (3,531 samples, 8.22%)</title><rect x="64.1177%" y="341" width="8.2246%" height="15" fill="rgb(209,138,14)" fg:x="27527" fg:w="3531"/><text x="64.3677%" y="351.50">&lt;&amp;mut W as ..</text></g><g><title>core::fmt::write (3,531 samples, 8.22%)</title><rect x="64.1177%" y="325" width="8.2246%" height="15" fill="rgb(222,18,33)" fg:x="27527" fg:w="3531"/><text x="64.3677%" y="335.50">core::fmt::..</text></g><g><title>core::fmt::rt::Argument::fmt (1,832 samples, 4.27%)</title><rect x="68.0751%" y="309" width="4.2672%" height="15" fill="rgb(213,199,7)" fg:x="29226" fg:w="1832"/><text x="68.3251%" y="319.50">core:..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1,832 samples, 4.27%)</title><rect x="68.0751%" y="293" width="4.2672%" height="15" fill="rgb(250,110,10)" fg:x="29226" fg:w="1832"/><text x="68.3251%" y="303.50">core:..</text></g><g><title>core::fmt::num::imp::fmt_u64 (1,629 samples, 3.79%)</title><rect x="68.5479%" y="277" width="3.7944%" height="15" fill="rgb(248,123,6)" fg:x="29429" fg:w="1629"/><text x="68.7979%" y="287.50">core..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.01%)</title><rect x="72.3283%" y="261" width="0.0140%" height="15" fill="rgb(206,91,31)" fg:x="31052" fg:w="6"/><text x="72.5783%" y="271.50"></text></g><g><title>alloc::fmt::format (4,771 samples, 11.11%)</title><rect x="61.2550%" y="421" width="11.1129%" height="15" fill="rgb(211,154,13)" fg:x="26298" fg:w="4771"/><text x="61.5050%" y="431.50">alloc::fmt::form..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (4,771 samples, 11.11%)</title><rect x="61.2550%" y="405" width="11.1129%" height="15" fill="rgb(225,148,7)" fg:x="26298" fg:w="4771"/><text x="61.5050%" y="415.50">core::option::Op..</text></g><g><title>alloc::fmt::format::_{{closure}} (4,771 samples, 11.11%)</title><rect x="61.2550%" y="389" width="11.1129%" height="15" fill="rgb(220,160,43)" fg:x="26298" fg:w="4771"/><text x="61.5050%" y="399.50">alloc::fmt::form..</text></g><g><title>alloc::fmt::format::format_inner (4,759 samples, 11.08%)</title><rect x="61.2830%" y="373" width="11.0850%" height="15" fill="rgb(213,52,39)" fg:x="26310" fg:w="4759"/><text x="61.5330%" y="383.50">alloc::fmt::form..</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (11 samples, 0.03%)</title><rect x="72.3423%" y="357" width="0.0256%" height="15" fill="rgb(243,137,7)" fg:x="31058" fg:w="11"/><text x="72.5923%" y="367.50"></text></g><g><title>core::fmt::Arguments::new_v1 (64 samples, 0.15%)</title><rect x="72.3679%" y="421" width="0.1491%" height="15" fill="rgb(230,79,13)" fg:x="31069" fg:w="64"/><text x="72.6179%" y="431.50"></text></g><g><title>__GI___close (732 samples, 1.71%)</title><rect x="72.5170%" y="341" width="1.7050%" height="15" fill="rgb(247,105,23)" fg:x="31133" fg:w="732"/><text x="72.7670%" y="351.50"></text></g><g><title>[unknown] (663 samples, 1.54%)</title><rect x="72.6777%" y="325" width="1.5443%" height="15" fill="rgb(223,179,41)" fg:x="31202" fg:w="663"/><text x="72.9277%" y="335.50"></text></g><g><title>[unknown] (663 samples, 1.54%)</title><rect x="72.6777%" y="309" width="1.5443%" height="15" fill="rgb(218,9,34)" fg:x="31202" fg:w="663"/><text x="72.9277%" y="319.50"></text></g><g><title>[unknown] (663 samples, 1.54%)</title><rect x="72.6777%" y="293" width="1.5443%" height="15" fill="rgb(222,106,8)" fg:x="31202" fg:w="663"/><text x="72.9277%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (979 samples, 2.28%)</title><rect x="72.5170%" y="421" width="2.2804%" height="15" fill="rgb(211,220,0)" fg:x="31133" fg:w="979"/><text x="72.7670%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fs::File&gt; (979 samples, 2.28%)</title><rect x="72.5170%" y="405" width="2.2804%" height="15" fill="rgb(229,52,16)" fg:x="31133" fg:w="979"/><text x="72.7670%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (979 samples, 2.28%)</title><rect x="72.5170%" y="389" width="2.2804%" height="15" fill="rgb(212,155,18)" fg:x="31133" fg:w="979"/><text x="72.7670%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (979 samples, 2.28%)</title><rect x="72.5170%" y="373" width="2.2804%" height="15" fill="rgb(242,21,14)" fg:x="31133" fg:w="979"/><text x="72.7670%" y="383.50">c..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (979 samples, 2.28%)</title><rect x="72.5170%" y="357" width="2.2804%" height="15" fill="rgb(222,19,48)" fg:x="31133" fg:w="979"/><text x="72.7670%" y="367.50">&lt;..</text></g><g><title>close@plt (247 samples, 0.58%)</title><rect x="74.2220%" y="341" width="0.5753%" height="15" fill="rgb(232,45,27)" fg:x="31865" fg:w="247"/><text x="74.4720%" y="351.50"></text></g><g><title>_int_free (359 samples, 0.84%)</title><rect x="76.3649%" y="261" width="0.8362%" height="15" fill="rgb(249,103,42)" fg:x="32785" fg:w="359"/><text x="76.6149%" y="271.50"></text></g><g><title>tcache_put (71 samples, 0.17%)</title><rect x="77.0358%" y="245" width="0.1654%" height="15" fill="rgb(246,81,33)" fg:x="33073" fg:w="71"/><text x="77.2858%" y="255.50"></text></g><g><title>__GI___libc_free (1,031 samples, 2.40%)</title><rect x="74.8416%" y="277" width="2.4015%" height="15" fill="rgb(252,33,42)" fg:x="32131" fg:w="1031"/><text x="75.0916%" y="287.50">__..</text></g><g><title>arena_for_chunk (18 samples, 0.04%)</title><rect x="77.2012%" y="261" width="0.0419%" height="15" fill="rgb(209,212,41)" fg:x="33144" fg:w="18"/><text x="77.4512%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,224 samples, 2.85%)</title><rect x="74.7974%" y="405" width="2.8510%" height="15" fill="rgb(207,154,6)" fg:x="32112" fg:w="1224"/><text x="75.0474%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,224 samples, 2.85%)</title><rect x="74.7974%" y="389" width="2.8510%" height="15" fill="rgb(223,64,47)" fg:x="32112" fg:w="1224"/><text x="75.0474%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,211 samples, 2.82%)</title><rect x="74.8276%" y="373" width="2.8207%" height="15" fill="rgb(211,161,38)" fg:x="32125" fg:w="1211"/><text x="75.0776%" y="383.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,211 samples, 2.82%)</title><rect x="74.8276%" y="357" width="2.8207%" height="15" fill="rgb(219,138,40)" fg:x="32125" fg:w="1211"/><text x="75.0776%" y="367.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,211 samples, 2.82%)</title><rect x="74.8276%" y="341" width="2.8207%" height="15" fill="rgb(241,228,46)" fg:x="32125" fg:w="1211"/><text x="75.0776%" y="351.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (1,211 samples, 2.82%)</title><rect x="74.8276%" y="325" width="2.8207%" height="15" fill="rgb(223,209,38)" fg:x="32125" fg:w="1211"/><text x="75.0776%" y="335.50">al..</text></g><g><title>__rdl_dealloc (1,211 samples, 2.82%)</title><rect x="74.8276%" y="309" width="2.8207%" height="15" fill="rgb(236,164,45)" fg:x="32125" fg:w="1211"/><text x="75.0776%" y="319.50">__..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,211 samples, 2.82%)</title><rect x="74.8276%" y="293" width="2.8207%" height="15" fill="rgb(231,15,5)" fg:x="32125" fg:w="1211"/><text x="75.0776%" y="303.50">st..</text></g><g><title>free@plt (174 samples, 0.41%)</title><rect x="77.2431%" y="277" width="0.4053%" height="15" fill="rgb(252,35,15)" fg:x="33162" fg:w="174"/><text x="77.4931%" y="287.50"></text></g><g><title>std::fs::OpenOptions::new (124 samples, 0.29%)</title><rect x="77.6484%" y="405" width="0.2888%" height="15" fill="rgb(248,181,18)" fg:x="33336" fg:w="124"/><text x="77.8984%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (374 samples, 0.87%)</title><rect x="78.4403%" y="373" width="0.8711%" height="15" fill="rgb(233,39,42)" fg:x="33676" fg:w="374"/><text x="78.6903%" y="383.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (505 samples, 1.18%)</title><rect x="79.3208%" y="309" width="1.1763%" height="15" fill="rgb(238,110,33)" fg:x="34054" fg:w="505"/><text x="79.5708%" y="319.50"></text></g><g><title>core::slice::memchr::memchr (505 samples, 1.18%)</title><rect x="79.3208%" y="293" width="1.1763%" height="15" fill="rgb(233,195,10)" fg:x="34054" fg:w="505"/><text x="79.5708%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (505 samples, 1.18%)</title><rect x="79.3208%" y="277" width="1.1763%" height="15" fill="rgb(254,105,3)" fg:x="34054" fg:w="505"/><text x="79.5708%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_naive (62 samples, 0.14%)</title><rect x="80.3527%" y="261" width="0.1444%" height="15" fill="rgb(221,225,9)" fg:x="34497" fg:w="62"/><text x="80.6027%" y="271.50"></text></g><g><title>__memcpy_generic (115 samples, 0.27%)</title><rect x="80.5157%" y="293" width="0.2679%" height="15" fill="rgb(224,227,45)" fg:x="34567" fg:w="115"/><text x="80.7657%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (135 samples, 0.31%)</title><rect x="80.4971%" y="309" width="0.3145%" height="15" fill="rgb(229,198,43)" fg:x="34559" fg:w="135"/><text x="80.7471%" y="319.50"></text></g><g><title>memcpy@plt (12 samples, 0.03%)</title><rect x="80.7836%" y="293" width="0.0280%" height="15" fill="rgb(206,209,35)" fg:x="34682" fg:w="12"/><text x="81.0336%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (12 samples, 0.03%)</title><rect x="80.8115%" y="309" width="0.0280%" height="15" fill="rgb(245,195,53)" fg:x="34694" fg:w="12"/><text x="81.0615%" y="319.50"></text></g><g><title>core::ptr::write (12 samples, 0.03%)</title><rect x="80.8115%" y="293" width="0.0280%" height="15" fill="rgb(240,92,26)" fg:x="34694" fg:w="12"/><text x="81.0615%" y="303.50"></text></g><g><title>__libc_open64 (957 samples, 2.23%)</title><rect x="81.7292%" y="245" width="2.2291%" height="15" fill="rgb(207,40,23)" fg:x="35088" fg:w="957"/><text x="81.9792%" y="255.50">_..</text></g><g><title>[unknown] (690 samples, 1.61%)</title><rect x="82.3512%" y="229" width="1.6072%" height="15" fill="rgb(223,111,35)" fg:x="35355" fg:w="690"/><text x="82.6012%" y="239.50"></text></g><g><title>[unknown] (690 samples, 1.61%)</title><rect x="82.3512%" y="213" width="1.6072%" height="15" fill="rgb(229,147,28)" fg:x="35355" fg:w="690"/><text x="82.6012%" y="223.50"></text></g><g><title>[unknown] (690 samples, 1.61%)</title><rect x="82.3512%" y="197" width="1.6072%" height="15" fill="rgb(211,29,28)" fg:x="35355" fg:w="690"/><text x="82.6012%" y="207.50"></text></g><g><title>std::sys::pal::unix::cvt_r (1,219 samples, 2.84%)</title><rect x="81.7246%" y="277" width="2.8394%" height="15" fill="rgb(228,72,33)" fg:x="35086" fg:w="1219"/><text x="81.9746%" y="287.50">st..</text></g><g><title>std::sys::pal::unix::fs::File::open_c::_{{closure}} (1,217 samples, 2.83%)</title><rect x="81.7292%" y="261" width="2.8347%" height="15" fill="rgb(205,214,31)" fg:x="35088" fg:w="1217"/><text x="81.9792%" y="271.50">st..</text></g><g><title>open64@plt (260 samples, 0.61%)</title><rect x="83.9584%" y="245" width="0.6056%" height="15" fill="rgb(224,111,15)" fg:x="36045" fg:w="260"/><text x="84.2084%" y="255.50"></text></g><g><title>std::sys::pal::unix::fs::OpenOptions::get_access_mode (113 samples, 0.26%)</title><rect x="84.5640%" y="277" width="0.2632%" height="15" fill="rgb(253,21,26)" fg:x="36305" fg:w="113"/><text x="84.8140%" y="287.50"></text></g><g><title>std::fs::OpenOptions::open (3,171 samples, 7.39%)</title><rect x="77.9372%" y="405" width="7.3861%" height="15" fill="rgb(245,139,43)" fg:x="33460" fg:w="3171"/><text x="78.1872%" y="415.50">std::fs::O..</text></g><g><title>std::fs::OpenOptions::_open (3,171 samples, 7.39%)</title><rect x="77.9372%" y="389" width="7.3861%" height="15" fill="rgb(252,170,7)" fg:x="33460" fg:w="3171"/><text x="78.1872%" y="399.50">std::fs::O..</text></g><g><title>std::sys::pal::unix::fs::File::open (2,581 samples, 6.01%)</title><rect x="79.3115%" y="373" width="6.0118%" height="15" fill="rgb(231,118,14)" fg:x="34050" fg:w="2581"/><text x="79.5615%" y="383.50">std::sys..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (2,577 samples, 6.00%)</title><rect x="79.3208%" y="357" width="6.0025%" height="15" fill="rgb(238,83,0)" fg:x="34054" fg:w="2577"/><text x="79.5708%" y="367.50">std::sys..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (2,577 samples, 6.00%)</title><rect x="79.3208%" y="341" width="6.0025%" height="15" fill="rgb(221,39,39)" fg:x="34054" fg:w="2577"/><text x="79.5708%" y="351.50">std::sys..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (2,577 samples, 6.00%)</title><rect x="79.3208%" y="325" width="6.0025%" height="15" fill="rgb(222,119,46)" fg:x="34054" fg:w="2577"/><text x="79.5708%" y="335.50">std::sys..</text></g><g><title>std::sys::pal::unix::fs::File::open::_{{closure}} (1,925 samples, 4.48%)</title><rect x="80.8395%" y="309" width="4.4838%" height="15" fill="rgb(222,165,49)" fg:x="34706" fg:w="1925"/><text x="81.0895%" y="319.50">std::..</text></g><g><title>std::sys::pal::unix::fs::File::open_c (1,921 samples, 4.47%)</title><rect x="80.8488%" y="293" width="4.4745%" height="15" fill="rgb(219,113,52)" fg:x="34710" fg:w="1921"/><text x="81.0988%" y="303.50">std::..</text></g><g><title>std::sys::pal::unix::fs::OpenOptions::get_creation_mode (213 samples, 0.50%)</title><rect x="84.8272%" y="277" width="0.4961%" height="15" fill="rgb(214,7,15)" fg:x="36418" fg:w="213"/><text x="85.0772%" y="287.50"></text></g><g><title>std::fs::File::create (4,528 samples, 10.55%)</title><rect x="74.7974%" y="421" width="10.5469%" height="15" fill="rgb(235,32,4)" fg:x="32112" fg:w="4528"/><text x="75.0474%" y="431.50">std::fs::File::..</text></g><g><title>std::fs::OpenOptions::truncate (9 samples, 0.02%)</title><rect x="85.3233%" y="405" width="0.0210%" height="15" fill="rgb(238,90,54)" fg:x="36631" fg:w="9"/><text x="85.5733%" y="415.50"></text></g><g><title>std::sys::pal::unix::fs::OpenOptions::truncate (9 samples, 0.02%)</title><rect x="85.3233%" y="389" width="0.0210%" height="15" fill="rgb(213,208,19)" fg:x="36631" fg:w="9"/><text x="85.5733%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.05%)</title><rect x="87.7201%" y="389" width="0.0512%" height="15" fill="rgb(233,156,4)" fg:x="37660" fg:w="22"/><text x="87.9701%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.05%)</title><rect x="87.7201%" y="373" width="0.0512%" height="15" fill="rgb(207,194,5)" fg:x="37660" fg:w="22"/><text x="87.9701%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.02%)</title><rect x="87.7527%" y="357" width="0.0186%" height="15" fill="rgb(206,111,30)" fg:x="37674" fg:w="8"/><text x="88.0027%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.02%)</title><rect x="87.7714%" y="389" width="0.0233%" height="15" fill="rgb(243,70,54)" fg:x="37682" fg:w="10"/><text x="88.0214%" y="399.50"></text></g><g><title>core::fmt::Formatter::new (72 samples, 0.17%)</title><rect x="87.7947%" y="389" width="0.1677%" height="15" fill="rgb(242,28,8)" fg:x="37692" fg:w="72"/><text x="88.0447%" y="399.50"></text></g><g><title>__GI___libc_write (771 samples, 1.80%)</title><rect x="90.6364%" y="245" width="1.7959%" height="15" fill="rgb(219,106,18)" fg:x="38912" fg:w="771"/><text x="90.8864%" y="255.50">_..</text></g><g><title>[unknown] (686 samples, 1.60%)</title><rect x="90.8343%" y="229" width="1.5979%" height="15" fill="rgb(244,222,10)" fg:x="38997" fg:w="686"/><text x="91.0843%" y="239.50"></text></g><g><title>[unknown] (686 samples, 1.60%)</title><rect x="90.8343%" y="213" width="1.5979%" height="15" fill="rgb(236,179,52)" fg:x="38997" fg:w="686"/><text x="91.0843%" y="223.50"></text></g><g><title>[unknown] (686 samples, 1.60%)</title><rect x="90.8343%" y="197" width="1.5979%" height="15" fill="rgb(213,23,39)" fg:x="38997" fg:w="686"/><text x="91.0843%" y="207.50"></text></g><g><title>core::cmp::min (22 samples, 0.05%)</title><rect x="92.4322%" y="245" width="0.0512%" height="15" fill="rgb(238,48,10)" fg:x="39683" fg:w="22"/><text x="92.6822%" y="255.50"></text></g><g><title>core::cmp::Ord::min (22 samples, 0.05%)</title><rect x="92.4322%" y="229" width="0.0512%" height="15" fill="rgb(251,196,23)" fg:x="39683" fg:w="22"/><text x="92.6822%" y="239.50"></text></g><g><title>core::cmp::min_by (22 samples, 0.05%)</title><rect x="92.4322%" y="213" width="0.0512%" height="15" fill="rgb(250,152,24)" fg:x="39683" fg:w="22"/><text x="92.6822%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,709 samples, 3.98%)</title><rect x="89.1107%" y="341" width="3.9807%" height="15" fill="rgb(209,150,17)" fg:x="38257" fg:w="1709"/><text x="89.3607%" y="351.50">&lt;std..</text></g><g><title>std::io::Write::write_all (1,414 samples, 3.29%)</title><rect x="89.7978%" y="325" width="3.2936%" height="15" fill="rgb(234,202,34)" fg:x="38552" fg:w="1414"/><text x="90.0478%" y="335.50">std..</text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1,188 samples, 2.77%)</title><rect x="90.3242%" y="309" width="2.7672%" height="15" fill="rgb(253,148,53)" fg:x="38778" fg:w="1188"/><text x="90.5742%" y="319.50">&lt;s..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1,188 samples, 2.77%)</title><rect x="90.3242%" y="293" width="2.7672%" height="15" fill="rgb(218,129,16)" fg:x="38778" fg:w="1188"/><text x="90.5742%" y="303.50">&lt;&amp;..</text></g><g><title>std::sys::pal::unix::fs::File::write (1,188 samples, 2.77%)</title><rect x="90.3242%" y="277" width="2.7672%" height="15" fill="rgb(216,85,19)" fg:x="38778" fg:w="1188"/><text x="90.5742%" y="287.50">st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (1,188 samples, 2.77%)</title><rect x="90.3242%" y="261" width="2.7672%" height="15" fill="rgb(235,228,7)" fg:x="38778" fg:w="1188"/><text x="90.5742%" y="271.50">st..</text></g><g><title>write@plt (261 samples, 0.61%)</title><rect x="92.4835%" y="245" width="0.6079%" height="15" fill="rgb(245,175,0)" fg:x="39705" fg:w="261"/><text x="92.7335%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.03%)</title><rect x="93.9602%" y="325" width="0.0256%" height="15" fill="rgb(208,168,36)" fg:x="40339" fg:w="11"/><text x="94.2102%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_integral (466 samples, 1.09%)</title><rect x="93.0914%" y="341" width="1.0854%" height="15" fill="rgb(246,171,24)" fg:x="39966" fg:w="466"/><text x="93.3414%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (82 samples, 0.19%)</title><rect x="93.9858%" y="325" width="0.1910%" height="15" fill="rgb(215,142,24)" fg:x="40350" fg:w="82"/><text x="94.2358%" y="335.50"></text></g><g><title>rppal::pwm::Pwm::set_duty_cycle (36,113 samples, 84.12%)</title><rect x="10.0811%" y="453" width="84.1167%" height="15" fill="rgb(250,187,7)" fg:x="4328" fg:w="36113"/><text x="10.3311%" y="463.50">rppal::pwm::Pwm::set_duty_cycle</text></g><g><title>rppal::pwm::sysfs::set_pulse_width (14,694 samples, 34.23%)</title><rect x="59.9716%" y="437" width="34.2262%" height="15" fill="rgb(228,66,33)" fg:x="25747" fg:w="14694"/><text x="60.2216%" y="447.50">rppal::pwm::sysfs::set_pulse_width</text></g><g><title>std::io::Write::write_fmt (3,801 samples, 8.85%)</title><rect x="85.3443%" y="421" width="8.8535%" height="15" fill="rgb(234,215,21)" fg:x="36640" fg:w="3801"/><text x="85.5943%" y="431.50">std::io::Writ..</text></g><g><title>core::fmt::write (3,276 samples, 7.63%)</title><rect x="86.5671%" y="405" width="7.6307%" height="15" fill="rgb(222,191,20)" fg:x="37165" fg:w="3276"/><text x="86.8171%" y="415.50">core::fmt:..</text></g><g><title>core::fmt::rt::Argument::fmt (2,677 samples, 6.24%)</title><rect x="87.9624%" y="389" width="6.2354%" height="15" fill="rgb(245,79,54)" fg:x="37764" fg:w="2677"/><text x="88.2124%" y="399.50">core::fm..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2,661 samples, 6.20%)</title><rect x="87.9996%" y="373" width="6.1982%" height="15" fill="rgb(240,10,37)" fg:x="37780" fg:w="2661"/><text x="88.2496%" y="383.50">core::fm..</text></g><g><title>core::fmt::num::imp::fmt_u64 (2,397 samples, 5.58%)</title><rect x="88.6146%" y="357" width="5.5832%" height="15" fill="rgb(214,192,32)" fg:x="38044" fg:w="2397"/><text x="88.8646%" y="367.50">core::f..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.02%)</title><rect x="94.1768%" y="341" width="0.0210%" height="15" fill="rgb(209,36,54)" fg:x="40432" fg:w="9"/><text x="94.4268%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (92 samples, 0.21%)</title><rect x="94.1978%" y="405" width="0.2143%" height="15" fill="rgb(220,10,11)" fg:x="40441" fg:w="92"/><text x="94.4478%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (11 samples, 0.03%)</title><rect x="94.4331%" y="373" width="0.0256%" height="15" fill="rgb(221,106,17)" fg:x="40542" fg:w="11"/><text x="94.6831%" y="383.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Nanoseconds as core::cmp::PartialOrd&gt;::partial_cmp (8 samples, 0.02%)</title><rect x="95.3391%" y="309" width="0.0186%" height="15" fill="rgb(251,142,44)" fg:x="40931" fg:w="8"/><text x="95.5891%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::partial_cmp (8 samples, 0.02%)</title><rect x="95.3391%" y="293" width="0.0186%" height="15" fill="rgb(238,13,15)" fg:x="40931" fg:w="8"/><text x="95.5891%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (25 samples, 0.06%)</title><rect x="95.3391%" y="357" width="0.0582%" height="15" fill="rgb(208,107,27)" fg:x="40931" fg:w="25"/><text x="95.5891%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (25 samples, 0.06%)</title><rect x="95.3391%" y="341" width="0.0582%" height="15" fill="rgb(205,136,37)" fg:x="40931" fg:w="25"/><text x="95.5891%" y="351.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.06%)</title><rect x="95.3391%" y="325" width="0.0582%" height="15" fill="rgb(250,205,27)" fg:x="40931" fg:w="25"/><text x="95.5891%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (17 samples, 0.04%)</title><rect x="95.3578%" y="309" width="0.0396%" height="15" fill="rgb(210,80,43)" fg:x="40939" fg:w="17"/><text x="95.6078%" y="319.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (519 samples, 1.21%)</title><rect x="94.1978%" y="437" width="1.2089%" height="15" fill="rgb(247,160,36)" fg:x="40441" fg:w="519"/><text x="94.4478%" y="447.50"></text></g><g><title>std::time::Instant::duration_since (519 samples, 1.21%)</title><rect x="94.1978%" y="421" width="1.2089%" height="15" fill="rgb(234,13,49)" fg:x="40441" fg:w="519"/><text x="94.4478%" y="431.50"></text></g><g><title>std::time::Instant::checked_duration_since (427 samples, 0.99%)</title><rect x="94.4121%" y="405" width="0.9946%" height="15" fill="rgb(234,122,0)" fg:x="40533" fg:w="427"/><text x="94.6621%" y="415.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (427 samples, 0.99%)</title><rect x="94.4121%" y="389" width="0.9946%" height="15" fill="rgb(207,146,38)" fg:x="40533" fg:w="427"/><text x="94.6621%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (407 samples, 0.95%)</title><rect x="94.4587%" y="373" width="0.9480%" height="15" fill="rgb(207,177,25)" fg:x="40553" fg:w="407"/><text x="94.7087%" y="383.50"></text></g><g><title>__GI___clock_gettime (778 samples, 1.81%)</title><rect x="95.7864%" y="389" width="1.8122%" height="15" fill="rgb(211,178,42)" fg:x="41123" fg:w="778"/><text x="96.0364%" y="399.50">_..</text></g><g><title>__kernel_clock_gettime (482 samples, 1.12%)</title><rect x="96.4758%" y="373" width="1.1227%" height="15" fill="rgb(230,69,54)" fg:x="41419" fg:w="482"/><text x="96.7258%" y="383.50"></text></g><g><title>clock_gettime@plt (308 samples, 0.72%)</title><rect x="97.5985%" y="389" width="0.7174%" height="15" fill="rgb(214,135,41)" fg:x="41901" fg:w="308"/><text x="97.8485%" y="399.50"></text></g><g><title>std::sys::pal::unix::cvt (17 samples, 0.04%)</title><rect x="98.3159%" y="389" width="0.0396%" height="15" fill="rgb(237,67,25)" fg:x="42209" fg:w="17"/><text x="98.5659%" y="399.50"></text></g><g><title>std::time::Instant::elapsed (1,884 samples, 4.39%)</title><rect x="94.1978%" y="453" width="4.3883%" height="15" fill="rgb(222,189,50)" fg:x="40441" fg:w="1884"/><text x="94.4478%" y="463.50">std::..</text></g><g><title>std::time::Instant::now (1,365 samples, 3.18%)</title><rect x="95.4067%" y="437" width="3.1794%" height="15" fill="rgb(245,148,34)" fg:x="40960" fg:w="1365"/><text x="95.6567%" y="447.50">std..</text></g><g><title>std::sys::pal::unix::time::Instant::now (1,365 samples, 3.18%)</title><rect x="95.4067%" y="421" width="3.1794%" height="15" fill="rgb(222,29,6)" fg:x="40960" fg:w="1365"/><text x="95.6567%" y="431.50">std..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,349 samples, 3.14%)</title><rect x="95.4440%" y="405" width="3.1422%" height="15" fill="rgb(221,189,43)" fg:x="40976" fg:w="1349"/><text x="95.6940%" y="415.50">std..</text></g><g><title>std::sys::pal::unix::time::Timespec::new (99 samples, 0.23%)</title><rect x="98.3555%" y="389" width="0.2306%" height="15" fill="rgb(207,36,27)" fg:x="42226" fg:w="99"/><text x="98.6055%" y="399.50"></text></g><g><title>__GI___clock_gettime (467 samples, 1.09%)</title><rect x="98.7911%" y="405" width="1.0878%" height="15" fill="rgb(217,90,24)" fg:x="42413" fg:w="467"/><text x="99.0411%" y="415.50"></text></g><g><title>__kernel_clock_gettime (395 samples, 0.92%)</title><rect x="98.9588%" y="389" width="0.9201%" height="15" fill="rgb(224,66,35)" fg:x="42485" fg:w="395"/><text x="99.2088%" y="399.50"></text></g><g><title>clock_gettime@plt (22 samples, 0.05%)</title><rect x="99.8789%" y="405" width="0.0512%" height="15" fill="rgb(221,13,50)" fg:x="42880" fg:w="22"/><text x="100.1289%" y="415.50"></text></g><g><title>std::sys::pal::unix::cvt (13 samples, 0.03%)</title><rect x="99.9301%" y="405" width="0.0303%" height="15" fill="rgb(236,68,49)" fg:x="42902" fg:w="13"/><text x="100.1801%" y="415.50"></text></g><g><title>__libc_start_main_impl (42,916 samples, 99.96%)</title><rect x="0.0116%" y="565" width="99.9627%" height="15" fill="rgb(229,146,28)" fg:x="5" fg:w="42916"/><text x="0.2616%" y="575.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (42,916 samples, 99.96%)</title><rect x="0.0116%" y="549" width="99.9627%" height="15" fill="rgb(225,31,38)" fg:x="5" fg:w="42916"/><text x="0.2616%" y="559.50">__libc_start_call_main</text></g><g><title>main (42,916 samples, 99.96%)</title><rect x="0.0116%" y="533" width="99.9627%" height="15" fill="rgb(250,208,3)" fg:x="5" fg:w="42916"/><text x="0.2616%" y="543.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (42,916 samples, 99.96%)</title><rect x="0.0116%" y="517" width="99.9627%" height="15" fill="rgb(246,54,23)" fg:x="5" fg:w="42916"/><text x="0.2616%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (42,916 samples, 99.96%)</title><rect x="0.0116%" y="501" width="99.9627%" height="15" fill="rgb(243,76,11)" fg:x="5" fg:w="42916"/><text x="0.2616%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>bench_default::main (42,916 samples, 99.96%)</title><rect x="0.0116%" y="485" width="99.9627%" height="15" fill="rgb(245,21,50)" fg:x="5" fg:w="42916"/><text x="0.2616%" y="495.50">bench_default::main</text></g><g><title>os_based::iteration (42,187 samples, 98.26%)</title><rect x="1.7097%" y="469" width="98.2647%" height="15" fill="rgb(228,9,43)" fg:x="734" fg:w="42187"/><text x="1.9597%" y="479.50">os_based::iteration</text></g><g><title>std::time::Instant::now (596 samples, 1.39%)</title><rect x="98.5861%" y="453" width="1.3882%" height="15" fill="rgb(208,100,47)" fg:x="42325" fg:w="596"/><text x="98.8361%" y="463.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (596 samples, 1.39%)</title><rect x="98.5861%" y="437" width="1.3882%" height="15" fill="rgb(232,26,8)" fg:x="42325" fg:w="596"/><text x="98.8361%" y="447.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (589 samples, 1.37%)</title><rect x="98.6024%" y="421" width="1.3719%" height="15" fill="rgb(216,166,38)" fg:x="42332" fg:w="589"/><text x="98.8524%" y="431.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::new (6 samples, 0.01%)</title><rect x="99.9604%" y="405" width="0.0140%" height="15" fill="rgb(251,202,51)" fg:x="42915" fg:w="6"/><text x="100.2104%" y="415.50"></text></g><g><title>_start (42,924 samples, 99.98%)</title><rect x="0.0023%" y="581" width="99.9814%" height="15" fill="rgb(254,216,34)" fg:x="1" fg:w="42924"/><text x="0.2523%" y="591.50">_start</text></g><g><title>bench-default (42,930 samples, 100.00%)</title><rect x="0.0000%" y="597" width="99.9953%" height="15" fill="rgb(251,32,27)" fg:x="0" fg:w="42930"/><text x="0.2500%" y="607.50">bench-default</text></g><g><title>thread_start (5 samples, 0.01%)</title><rect x="99.9837%" y="581" width="0.0116%" height="15" fill="rgb(208,127,28)" fg:x="42925" fg:w="5"/><text x="100.2337%" y="591.50"></text></g><g><title>all (42,932 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(224,137,22)" fg:x="0" fg:w="42932"/><text x="0.2500%" y="623.50"></text></g></svg></svg>